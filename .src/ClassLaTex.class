' Gambas class file

'version 0.0.5

Private contenido As String 'variable que contiene todo el texto
Private usepackagetexto As String 'controla los paquetes que puede añadir el usuario

Public Sub _new()
  'inicio el documento, con tipo de documento, y paquetes a usar.
  
  contenido = iniciodocumento()
  
End

Private Function iniciodocumento() As String
  
  Dim textocadena As String
  
  textocadena = "\\documentclass[12pt,a4paper]{article}" & gb.CrLf
  textocadena &= "\\usepackage[dvips,dvipsnames,usenames]{color}" & gb.CrLf
  textocadena &= "\\usepackage[utf8]{inputenc} % Escribir con acentos, ñ, ..." & gb.CrLf
  textocadena &= "\\usepackage{lscape}" & gb.CrLf
  textocadena &= "\\usepackage[pdftex]{graphicx}  % Inclusión de imágenes" & gb.CrLf 'graficos que se admiten
  textocadena &= "\\DeclareGraphicsExtensions {.pdf,.png,.jpg}" & gb.CrLf 'graficos que se admiten
  textocadena &= "\\usepackage{amsmath}" & gb.crlf 'cajas
  textocadena &= "\\usepackage{fancybox}" & gb.CrLf 'tipos de cajas alrededor del texto
  textocadena &= "\\usepackage{fancyhdr}" & gb.CrLf 'para indicar cabecera y pie de pagina
  textocadena &= "\\pagestyle{fancy} " & gb.CrLf 'para indicar cabecera y pie de pagina
  textocadena &= usepackagetexto & gb.CrLf
  textocadena &= "\\begin{document}" & gb.CrLf
  Return textocadena
  
End

Public Sub usepackage(cadena As String) As String
  
  usepackagetexto &= cadena & gb.CrLf
  
End

Public Sub compila(Optional documentocompleto As String, Optional NombreFinalPdf As String) ''documentocompleto: si le añado el codigo completo del documento desde una variable, NombreFinalPdf: nombre que final del documento (sin añadir .pdf)
  
  Dim comando As String
  Dim ficherotemporal As String
  Dim hproc As Process
  
  If IsNull(nombrefinalpdf) Then 
    'no me pasan ningun nombre, doy el nombre tipo, trabajando desde la carpeta temporal.
    
    ficherotemporal = user.home & "/ficherotmp.tex" ' User.home & "/ficherotmp.tex"
  Else
    ficherotemporal = user.home & "/" & NombreFinalPdf & ".tex"
  Endif
  
  If Not (IsNull(documentocompleto)) Then 
    'me han pasado el documentocompleto en latex, (sin el inicio), lo que hago es asignar el contenido añadiendo iniciodocumento y lo que me pasan.
    contenido = iniciodocumento() & documentocompleto
  Endif
  
  contenido &= "\\end{document}" & gb.CrLf
  'creo un fichero temporal
  
  file.Save(ficherotemporal, contenido)
  
  'creo el fichero .pdf  
  hproc = Exec ["pdflatex", ficherotemporal]
  Do While hproc.state = Process.Running
    Wait 0.2
  Loop
  
  'muestro el fichero .pdf
  Exec ["evince", Replace$(ficherotemporal, ".tex", ".pdf")]
  
End

Public Sub TablaDeContenido(Optional cadena As String) As String '' por defecto la cadena es Contenido
  
  Dim textocadena As String
  
  If IsNull(cadena) Then 
    textocadena &= "\\renewcommand{\\contentsname}{Contenido} \\tableofcontents" & gb.CrLf
  Else
    textocadena &= "\\renewcommand{\\contentsname}{" & titulo & "} \\tableofcontents" & gb.CrLf
  Endif
  contenido &= textocadena
  Return textocadena
  
End

Public Sub finPagina() As String ''fin de una pagina (salto de pagina)
  
  Dim textocadena As String
  
  textocadena &= "\\pagebreak" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub titulo(cadena As String, autor As String, Optional ponerfecha As Boolean) As String 'titulo tipico de los documentos
  
  Dim textocadena As String
  
  textocadena = "\\title{" & cadena & "}" & gb.CrLf
  textocadena &= "\\author{" & autor & "}" & gb.CrLf
  If IsNull(ponerfecha) Or If ponerfecha = False Then 
    'no pongo la fecha de cuando se compila el documento
  Else
    textocadena &= "\\date{\\today}" & gb.CrLf
  Endif
  textocadena &= "\\maketitle" & gb.CrLf
  
  contenido &= textocadena
  Return textocadena
  
End

Public Sub texto(cadena As String, Optional InicioParrafo As Boolean) As String '' InicioParrafo:si no se indica o es True, hace retorno de carro.
  
  Dim textocadena As String
  
  If IsNull(InicioParrafo) Or If InicioParrafo = True Then 
    textocadena = " " & gb.CrLf & cadena & gb.CrLf 
  Else
    textocadena &= cadena & gb.CrLf 
    
  Endif
  
  contenido &= textocadena
  Return textocadena
  
End

Public Sub CrLf() As String '' Retorno del carro (fin de la linea)
  
  Return Me.texto("", True)
  
End

Public Sub Tipoboldface(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena &= "{\\bf " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tiporoman(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\rm " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tipoitalica(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\it " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tiposlanted(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\sl " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub TiposansSerif(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\sf " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub TiposmallCaps(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\sc " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tipotypewriter(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\tt " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tam0Tiny(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\scriptsize " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tam1Small(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\small " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tam2Large(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\large " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tam3LargeP(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\LARGE " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub Tam4Huge(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\Huge " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub subrayado(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\underline{" & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub negrita(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "{\\bf " & cadena & "}"
  contenido &= textocadena
  Return textocadena
  
End

Public Sub AmbienteVerbatimInicio() As String ''especialmente para usar para escribir codigo
  
  Dim textocadena As String
  
  textocadena = "\\begin{verbatim}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub AmbienteVerbatimFin() As String
  
  Dim textocadena As String
  
  textocadena = "\\end{verbatim}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub AmbienteCentradoInicio(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\begin{center}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub AmbienteCentradoFin() As String
  
  Dim textocadena As String
  
  textocadena = "\\end{center}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub LineaJustCentrado(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\centerline{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub LineaJustIzq(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\leftline{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub LineaJustDer(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\rightline{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

'-----------------------------------------------------------------
'                tablas Resultado de una consulta de base de datos
'-----------------------------------------------------------------

Public Sub ResultadoConsultaDB(resultados As Result, nombretablas As Boolean, Optional formato As String) As String
  
  Dim textocadena As String
  Dim hfield As ResultField  
  Dim nombrecampo As String
  Dim campotemp As String
  Dim campo As New String[]
  Dim textorejilla As String
  Dim a As Integer
  Dim b As Integer
  Dim resultado As Result
  
  'formato
  If IsNull(formato) Then 
    'formato es nulo, el formato basico es con rejilla dibujado
    For Each hfield In resultados.fields
      formato &= "|c"
    Next
    formato &= "|"
  Endif
  'formato
  textocadena = Me.tablainicio(formato)
  
  'leo los titulos de las columnas 
  textorejilla = ""
  textorejilla &= "\\hline  \n"
  
  For Each hField In resultados.Fields
    If nombretablas = True Then
      nombrecampo = Str$(hfield.name)
    Else
      campotemp = Str$(hfield.name)
      nombrecampo = Mid$(campotemp, RInStr(campotemp, ".") + 1, Len(campotemp))
      
    Endif
    campo.Add(nombrecampo)
  Next
  
  'pongo en la tabla el titulo de las columnas
  For a = 0 To campo.count - 2
    
    textorejilla &= "{\\bf " & campo[a] & " } & "
  Next
  textorejilla &= "{\\bf " & campo[campo.count - 1] & " } \\\\ "
  textorejilla &= "\\hline  \n"
  
  'leo los datos..
  Do While resultados.available
    
    For b = 0 To campo.count - 2
      textorejilla &= resultados[campo[b]] & " & "
    Next
    textorejilla &= resultados[campo[b]] & "\\\\ \n"
    textorejilla &= "\\hline  \n" 
    resultados.movenext
    
  Loop 
  
  textocadena &= Me.texto(textorejilla)
  textocadena &= Me.CrLf()
  textocadena &= Me.tablaFin()
  Return textocadena
  
End

'-----------------------------------------------------------------
'                tablas Gridviews
'-----------------------------------------------------------------

Public Sub TablaGridViews(rejilla As Gridview, Optional formato As String) As String 
  
  Dim textocadena As String
  Dim textorejilla As String
  Dim a As Integer
  Dim b As Integer
  'formato
  If IsNull(formato) Then 
    'formato es nulo, el formato basico es con rejilla dibujado
    For a = 0 To rejilla.Columns.count 
      formato &= "|c"
    Next
    formato &= "|"
  Endif
  
  textocadena = Me.tablainicio(formato)
  
  'leo los titulos de las columnas 
  textorejilla = ""
  textorejilla &= "\\hline  \n"
  
  For a = 0 To rejilla.Columns.count - 2
    textorejilla &= "{\\bf " & rejilla.Columns[a].title & " } & "
  Next
  textorejilla &= "{\\bf " & rejilla.Columns[rejilla.Columns.count - 1].title & " } \\\\ "
  textorejilla &= "\\hline  \n"
  
  'leo los datos..
  For a = 0 To rejilla.Rows.count - 1
    For b = 0 To rejilla.Columns.count - 2
      textorejilla &= rejilla[a, b].text & " & "
    Next
    textorejilla &= rejilla[a, b].text & "\\\\ \n"
    textorejilla &= "\\hline  \n" 
  Next 
  
  textocadena &= Me.texto(textorejilla)
  textocadena &= Me.CrLf()
  textocadena &= Me.tablaFin()
  Return textocadena
  
End

Public Sub tablainicio(Optional formato As String) As String ''formato: l (izq), c (centrada), r (derecha), p (parafos) de las columnas
  
  Dim textocadena As String
  
  'ejemplos de formato:
  ' |1||r|p{2cm}|
  ' lrc
  
  If IsNull(formato) Then 
    textocadena = "\\begin{tabular}" & gb.CrLf
  Else
    
    textocadena = "\\begin{tabular}{" & formato & "}" & gb.CrLf
  Endif
  contenido &= textocadena
  Return textocadena
  
End

Public Sub tablaFin() As String
  
  Dim textocadena As String
  
  textocadena = "\\end{tabular}\n"
  contenido &= textocadena
  Return textocadena
  
End

'-----------------------------------------------------------------
'              Listas
'-----------------------------------------------------------------

Public Sub ListaEnumeradaInicio() As String
  
  Dim textocadena As String
  
  textocadena = "\\begin{enumerate}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub ListaDato(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\item " & cadena & gb.CrLf & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub ListaEnumeradaFin() As String
  
  Dim textocadena As String
  
  textocadena = "\\end{enumerate} " & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

'-----------------------------------------------------------------
'                Secciones
'-----------------------------------------------------------------
Public Sub Seccion(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\section{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub SubSeccion(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\subsection{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub SubSubSeccion(cadena As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\subsubsection{" & cadena & "}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

'--------------------------------------------------------
' Hoja Apaisada
'--------------------------------------------------------
Public Sub HojaApaisadaInicio() As String
  
  Dim textocadena As String
  
  textocadena = "\\begin{landscape}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Public Sub HojaApaisadafin() As String
  
  Dim textocadena As String
  
  textocadena = "\\end{landscape}" & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End
'----------------------------------------------------------------------------------------
'insersion de imagenes
'----------------------------------------------------------------------------------------

Public Sub grafica(fichero As String, Optional escala As Float, Optional angulo As Float) As String ''fichero: nombre del fichero, escala y angulo del fichero
  
  Dim textocadena As String
  'muevo el fichero de grafico al usuario user.home
  Try Copy fichero To user.home & "/" & quitoruta(fichero)
  
  If IsNull(escala) Then escala = 1
  If IsNull(angulo) Then angulo = 0
  textocadena = "\\includegraphics[scale=" & escala & ",angle=" & angulo & "]{" & quitoruta(fichero) & "} " & gb.CrLf
  contenido &= textocadena
  Return textocadena
  
End

Private Function quitoruta(Nombrefichero As String) As String
  
  Dim letra As String
  Dim nombre As String
  Dim a As Integer 
  
  For a = (Len(Nombrefichero)) To 0 Step -1
    If Mid$(nombrefichero, a, 1) = "/" Then 
      Return nombre
    Else
      nombre = Mid$(nombrefichero, a, 1) & nombre
    Endif
  Next
  
  Return nombre
  
End

'------------------------------------------------------------------------
' cajas
'------------------------------------------------------------------------

Public Function framebox(textoBox As String, ancho As Integer, alineacion As String) As String
  
  Dim textocadena As String
  
  textocadena &= "\\framebox[" & ancho & "cm] [" & alineacion & "] {" & textobox & "}" & gb.CrLf
  
  contenido &= textocadena
  Return textocadena
  
End
'------------------------------------------------------------------------
'Parrafos en una caja
'------------------------------------------------------------------------

Public Function parbox(textominipagina As String) As String
  
  Dim textocadena As String
  
  textocadena = "\\parbox[b] {1\\linewidth} { " & gb.CrLf
  textocadena &= textominipagina & gb.CrLf
  
  textocadena &= "} " & gb.CrLf
  
  contenido &= textocadena
  Return textocadena
  
End
'------------------------------------------------
'dibujo de caja de distintos tipos
'------------------------------------------------

Public Function cajaMensaje(textobox As String, Optional tipo As Integer) As String ''tipo:1 enmarcado con sobra, 2: doble, 3:Ovalado , 4: Ovaldado doble
  
  Dim textocadena As String
  
  If IsNull(tipo) Or If tipo = 0 Then tipo = 1
  Select tipo
    Case 1
      
      textocadena = "\\shadowbox{" & parbox(textobox) & "}" & gb.CrLf
    Case 2
      textocadena = "\\doublebox{" & parbox(textobox) & "}" & gb.CrLf
    Case 3
      textocadena = "\\ovalbox{" & parbox(textobox) & "}" & gb.CrLf
    Case 4
      textocadena = "\\Ovalbox{" & parbox(textobox) & "}" & gb.CrLf
    Default
      textocadena = "\\shadowbox{" & parbox(textobox) & "}" & gb.CrLf
  End Select
  
  contenido &= textocadena
  
  Return textocadena
  
End

'------------------------------------------------------------------------
'caja de mensaje e icono
'------------------------------------------------------------------------
'
Public Sub CajaIcono(titulo As String, textocadena As String, imagen As String, escala As Float, angulo As Float, Optional tipo As String) As String
  
  Dim tex As String
  Dim parrafada As String
  
  parrafada = grafica(imagen, escala, angulo) & negrita(titulo) & gb.CrLf & gb.CrLf & textocadena
  tex &= cajaMensaje(parrafada, tipo)
  contenido &= tex
  
  Return tex
  
End
'-------------------------------------------------------------
'pie de pagina
'-------------------------------------------------------------

Public Function NotaPieDePagina(textocadena As String) As String
  
  Dim tex As String
  
  tex = "\\footnote{" & textocadena & "}" & gb.CrLf
  
  contenido &= tex
  
  Return tex
  
End

'-------------------------------------------------------------
'bibliografia
'-------------------------------------------------------------

Public Sub Cita(referenciaBibliografica As String) As String
  
  Dim tex As String
  
  tex = "\\cite{" & referenciaBibliografica & "} "
  contenido &= tex
  Return tex 
  
End

Public Function BibliografiaInicio(Leyenda As String) As String
  
  Dim tex As String
  
  tex = "\\renewcommand{\\refname}{" & Leyenda & "} " & gb.CrLf
  tex &= "\\begin{thebibliography}{11} " & gb.CrLf
  contenido &= tex
  Return tex 
  
End

Public Function BibliografiaItem(referencia As String, textocadena As String) As String
  
  Dim tex As String
  
  tex &= "\\bibitem{" & referencia & "} " & textocadena & gb.CrLf 
  contenido &= tex
  Return tex 
  
End

Public Function BibliografiaFin() As String
  
  Dim tex As String
  
  tex = "\\end{thebibliography} " & gb.CrLf 
  contenido &= tex
  Return tex 
  
End
'--------------------------------------------------------------------
' Cabecera y Pie de Página
'--------------------------------------------------------------------

Public Sub numeropagina() As String
  
  Dim tex As String
  
  tex = "  \\thepage"
  contenido &= tex
  Return tex 
  
End

Public Sub Cabecera(textoIzquierda As String, textoCentro As String, TextoDerecha As String, Optional grosorlinea As Float) 'no devuelve ningun valor, ya que esta en la zona de inicio del documento
  
  Dim tex As String
  
  tex = "\\lhead{" & textoIzquierda & "} " & gb.CrLf
  tex &= "\\chead{" & textoCentro & "}" & gb.CrLf
  tex &= "\\rhead{" & TextoDerecha & "}" & gb.CrLf
  tex &= "" & gb.CrLf
  If IsNull(grosorlinea) Or If grosorlinea = 0 Then 
    tex &= "\\renewcommand{\\headrulewidth}{0.4pt} " & gb.CrLf
  Else
    tex &= "\\renewcommand{\\headrulewidth}{" + grosorlinea + "} " & gb.CrLf
  Endif
  usepackagetexto &= tex
  Return 
  
End

Public Sub Pie(textoIzquierda As String, textoCentro As String, TextoDerecha As String, Optional grosorlinea As Float) 'no devuelve ningun valor, ya que esta en la zona de inicio del documento
  
  Dim tex As String
  
  tex = "\\lfoot{" & textoIzquierda & "} " & gb.CrLf
  tex &= "\\cfoot{" & textoCentro & "}" & gb.CrLf
  tex &= "\\rfoot{" & TextoDerecha & "}" & gb.CrLf
  tex &= "" & gb.CrLf
  If IsNull(grosorlinea) Or If grosorlinea = 0 Then 
    tex &= "\\renewcommand{\\footrulewidth}{0.4pt} " & gb.CrLf
  Else
    tex &= "\\renewcommand{\\footrulewidth}{" + grosorlinea + "} " & gb.CrLf
  Endif
  
  usepackagetexto &= tex
  Return 
  
End

'----------------------------------
' fecha
'---------------------------------- 
Public Sub fecha(Optional fecha As Date) As String
  
  Dim tex As String
  
  If IsNull(fecha) Or If fecha = 0 Then 
    tex = "\\today" & gb.CrLf
  Else
    tex = fecha & gb.CrLf
  Endif
  contenido &= tex
  Return tex 
  
End

'----------------------------------
'espacio horizontal y vertical
'----------------------------------
Public Sub hspace(Optional medida As Float) As String
  
  Dim tex As String
  
  If IsNull(medida) Or If medida = 0 Then 
    tex = "\\hspace{0.4cm} " & gb.CrLf
  Else
    tex = "\\hspace{" & medida & "cm} " & gb.CrLf
  Endif
  
  contenido &= tex
  Return tex  
  
End

Public Sub vspace(Optional medida As Float) As String
  
  Dim tex As String
  
  If IsNull(medida) Or If medida = 0 Then 
    tex = "\\vspace{0.4cm} " & gb.CrLf
  Else
    tex = "\\vspace{" & medida & "cm} " & gb.CrLf
  Endif
  
  contenido &= tex
  Return tex  
  
End
