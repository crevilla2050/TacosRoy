' Gambas class file

Private tmpCantidad As Integer

Private vBoxVariantes1 As VBox
Private vBoxVariantes2 As VBox
Private vBoxVariantes3 As VBox

Private lblIndex As Label
Private iTipoPrintJob As Integer
Private bGuardado As Boolean

Public Sub ith_children_of(hContainer As Container, i As Integer) As Object
  Dim hScan As Object
  Dim hResult As Object
  Dim counted As Integer
  Dim ith_controls_counted As Integer

  counted = 0
  For Each hScan In hContainer.Children
    Inc counted
    Dec i
    If i = 0 Then Return hScan
    If hScan Is Container Then
      ' traverse it
      hResult = ith_children_of(hScan, i)
      If hResult Then Return hResult  ' function found the control
      ' function exhausted controls, but how many?
      counted += ith_controls_counted
      i -= ith_controls_counted
    Endif
  Next
  ith_controls_counted = counted
End

Public Sub Form_Open()

  StartUp()

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnAgregar_Click()
  Dim iIDProd As Integer
  Print lblIndex.Text
  
  If tmpCantidad > 0 Then
    iIDProd = ColumnView1[ColumnView1.Current.key][2]
    AddItems(CInt(lblIndex.Text), iIDProd, tmpCantidad)
    lblIndex.Text = CStr(CInt(lblIndex.Text + 1))
  Else
    Message.Info("Indique cantidad por favor")
    Return
  Endif

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub ColumnView1_Click()

Dim sQuery As String  
Dim rResultVariantes As Result
'Dim Control As CheckBox
Dim intVariantes, iInd As Integer
Dim chkVariantes As CheckBox

  tmpCantidad = 0
  lblCantidad.Text = "Cantidad: 0"
  btnMenos.Enabled = False
  
  If ColumnView1[ColumnView1.Current.key][2] <> "" And ColumnView1.Current.Key[1] <> "" Then
    'Preparamos cajitas para opciones
    vBoxVariantes1.Children.Clear
    vBoxVariantes2.Children.Clear
    vBoxVariantes3.Children.Clear
    
    rResultVariantes = Null
    
    modVariables.i_currProductoInteger = ColumnView1[ColumnView1.Current.key][2]
    modVariables.i_sProductoTmp = ColumnView1.Current.Key[1]
    If (tmpCantidad <= 0) Then btnMenos.Enabled = False
    
    Label3.Text = "IDProd: " & modVariables.i_currProductoInteger
    'modVariables.i_currProductoInteger = ColumnView1.Current.key
    LabelDatoElegido.text = "Producto: " & ColumnView1[ColumnView1.Current.key][0] & " Valor: " & ColumnView1[ColumnView1.Current.key][1]
    
    modVariables.s_sCantidadProd = tmpCantidad
    'Print "i_sProductoTmp = " & modVariables.i_currProductoInteger
    
    sQuery = "SELECT "
    sQuery &= "    ANY_VALUE( `tbl_prods_variantes`.`id_producto`) AS `ID Producto`,"
    sQuery &= "    ANY_VALUE( `tbl_productos`.`chr_nombre_prod`) AS `Producto`,"
    sQuery &= "    ANY_VALUE( `tbl_variantes_platillos`.`chr_variante_nombre`) AS `Variante`,"
    sQuery &= "    ANY_VALUE( `tbl_variantes_platillos`.`chr_variante_descripcion`) AS `Desc`,"
    sQuery &= "    ANY_VALUE( `tbl_prods_variantes`.`id_variante`) AS `ID Variante`,"
    sQuery &= "    ANY_VALUE( `tbl_prods_variantes`.`id_prods_variantes`) AS `IDProdVar`,"
    sQuery &= "    ANY_VALUE( `tbl_categorias`.`id_categoria`) AS `ID Cat`,"
    sQuery &= "    ANY_VALUE(IFNULL( `tbl_costos_extra_var_prod`.`fl_costo_extra`, '0')) AS `Costo Extra`,"
    sQuery &= "    ANY_VALUE(IFNULL( `tbl_precios_productos`.`int_tipo_precio`,'1')) AS `Tipo Precio`,"
    sQuery &= "    ANY_VALUE( `tbl_variantes_platillos`.`fl_ordenar`) AS `Ordenar`,"
    sQuery &= "    ANY_VALUE( `tbl_prods_variantes`.`int_activo`) AS `Activo`"
    sQuery &= " From "
    sQuery &= "    `tbl_productos`"
    sQuery &= "    LEFT JOIN `tbl_prods_variantes` ON `tbl_prods_variantes`.`id_producto` = `tbl_productos`.`id_producto`"
    sQuery &= "    LEFT JOIN `tbl_variantes_platillos` ON `tbl_prods_variantes`.`id_variante` = `tbl_variantes_platillos`.`id_variante_pl`"
    sQuery &= "    LEFT JOIN `tbl_categorias` ON `tbl_productos`.`id_categoria` = `tbl_categorias`.`id_categoria`"
    sQuery &= "    LEFT JOIN `tbl_precios_productos` ON `tbl_prods_variantes`.`id_producto` = `tbl_precios_productos`.`id_producto`"
    sQuery &= "    LEFT JOIN `tbl_costos_extra_var_prod` ON `tbl_costos_extra_var_prod`.`id_producto_variante` = `tbl_prods_variantes`.`id_prods_variantes`"
    sQuery &= " WHERE "
    sQuery &= "    `tbl_prods_variantes`.`int_activo` = 1"
    sQuery &= "        And `tbl_precios_productos`.`bit_activo` = 1"
    sQuery &= "        And `tbl_prods_variantes`.`id_producto` = &1 and `tbl_precios_productos`.`int_tipo_precio` = &2"
    sQuery &= "        Group by `tbl_prods_variantes`.`id_variante`"
    
    'Print sQuery & ", " & modVariables.i_currProductoInteger 
    Try rResultVariantes = modVariables.c_Conn.Exec(sQuery, modVariables.i_currProductoInteger, modVariables.i_intTipoPrecio)
    
    If (rResultVariantes <> Null) And rResultVariantes.Available Then
      
      intVariantes = rResultVariantes.Count

      For Each rResultVariantes
        With rResultVariantes
          Inc iInd
          chkVariantes = New CheckBox(Me) As "chkVariantePlatillo"
          chkVariantes.AutoResize = False
          chkVariantes.Text = .["Variante"]
          chkVariantes.Value = False
          chkVariantes.Tag = .["ID Variante"]
          
          If iInd > 0 And iInd <= 10 Then
            chkVariantes.Reparent(vBoxVariantes1)
            chkVariantes.Width = 100
            chkVariantes.Height = 20
            chkVariantes.Y = (iInd * 5 + 10)
            Print "Y: " & chkVariantes.Top
          Else If iInd > 10 And iInd <= 20 Then
            chkVariantes.Reparent(vBoxVariantes2)
            chkVariantes.Width = 100
            chkVariantes.Height = 20
            chkVariantes.Y = (iInd * 5 + 10)
            Print "Y: " & chkVariantes.Top
          Else If iInd > 20 And iInd <= 30 Then
            chkVariantes.Reparent(vBoxVariantes3)
            chkVariantes.Width = 100
            chkVariantes.Height = 20
            chkVariantes.Y = (iInd * 5 + 10)
            Print "Y: " & chkVariantes.Top
          Endif
        End With
      Next
      vBoxVariantes1.Refresh
      vBoxVariantes2.Refresh
      vBoxVariantes3.Refresh
    Endif
  Else
    Label3.Text = "" 
    LabelDatoElegido.text = ""
    btnAgregar.Enabled = False
    vBoxVariantes1.Children.Clear
    vBoxVariantes2.Children.Clear
    vBoxVariantes3.Children.Clear
  Endif

rResultVariantes = Null
'HBoxVariantes.Refresh

Catch
  Print (Error.Text & ", " & Error.Where)
  'Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub StartUp()
  
  Dim sQuery As String
  Dim hResultCategorias As Result
  Dim hResultSubCats As Result
  
  'vBoxVariantes1 = New VBox(Me) As "vBoxVariantes1"
  lblIndex = New Label(Me) As "lblIndexG"
  
  If modVariables.c_Conn = Null Then modVariables.c_Conn = modConn.ConectarDB()
  
  'btnOK.Enabled = False
  btnAgregar.Enabled = False
  btnEliminar.Enabled = False
  ColumnView1.columns.count = 3
  lblIndex.Text = 0
  lblIndex.Visible = False
  
  With TableViewOrden
      .header = 3
      .rows.count = 0
      .columns.count = 4
      .Columns[0].title = "Cantidad"
      .Columns[1].title = "Producto"
      .Columns[2].title = "ID Prod."
      .Columns[3].title = "IDPO"
      .Columns[0].width = 51
      .Columns[1].width = 261
      .Columns[2].width = 60
      .Columns[3].width = 60
      
   End With
  
  colorear(TableViewOrden, 16777215, 0, 8487297, 0)
  
  ColumnView1.Columns[0].Text = "Producto"
  ColumnView1.Columns[0].alignment = Align.Left
  ColumnView1.Columns[1].Text = "Precio"
  ColumnView1.Columns[1].alignment = Align.Center
  ColumnView1.Columns[2].Text = "ID Prod"
  ColumnView1.Columns[2].alignment = Align.Left
  ColumnView1.mode = Select.Single
  ColumnView1.Header = 1
   
  'sQuery = "SELECT * FROM vw_products_catprecio where `IDTipo` = 1 and `Ordenar` is not null order by `Ordenar`;"
  sQuery = "SELECT * FROM tbl_categorias where bit_activo = 1 order by fl_orden;"
  Try hResultCategorias = modVariables.c_Conn.Exec(sQuery)
  
  If (hResultCategorias <> Null) And hResultCategorias.Available Then
    
    For Each hResultCategorias
      hResultSubCats = Null

      ColumnView1.Add(hResultCategorias["id_categoria"], hResultCategorias["chr_nombre_cat"])
      sQuery = "SELECT * FROM vw_products_catprecio where `CatID` = &1 and `IDTipo` = &2 and `Activo` = 1 and `Ordenar` is not null order by `Ordenar`;"
      Try hResultSubCats = modVariables.c_Conn.Exec(sQuery, hResultCategorias["id_categoria"], modVariables.i_intTipoPrecio)

      If (hResultSubCats <> Null) And hResultSubCats.Available Then
        For Each hResultSubCats
          ColumnView1.Add(hResultSubCats["ID Precio"], hResultSubCats["Producto"], Null, hResultCategorias["id_categoria"])
          ColumnView1[hResultSubCats["ID Precio"]][1] = hResultSubCats["Precio"]
          ColumnView1[hResultSubCats["ID Precio"]][2] = hResultSubCats["ID"]
        Next
      Endif
    Next
    'Preparamos cajitas para opciones
        
    vBoxVariantes1 = New VBox(Me) As "vBoxVariantes1"
    vBoxVariantes2 = New VBox(Me) As "vBoxVariantes2"
    vBoxVariantes3 = New VBox(Me) As "vBoxVariantes3"

    vBoxVariantes1.Reparent(HBoxVariantes)
    vBoxVariantes2.Reparent(HBoxVariantes)
    vBoxVariantes3.Reparent(HBoxVariantes)
    
    vBoxVariantes1.Expand = True
    vBoxVariantes2.Expand = True
    vBoxVariantes3.Expand = True
  Endif
  
  hResultCategorias = Null
  hResultSubCats = Null
  
  'Cargar elementos de la orden por si existen
  sQuery = "SELECT * FROM `vw_prods_x_orden` where `Orden` = &1 and `Activo` = 1"
  Try hResultCategorias = modVariables.c_Conn.Exec(sQuery, modVariables.i_intOrdenID)
  
  If (hResultCategorias <> Null) And hResultCategorias.Available Then
    For Each hResultCategorias
      TableViewOrden.Rows.Count += 1
      TableViewOrden[hResultCategorias.Index, 0].Text = CStr(hResultCategorias["Cantidad"]) 'CStr(i_Cantidad)
      TableViewOrden[hResultCategorias.Index, 1].Text = CStr(hResultCategorias["Producto"])

      TableViewOrden[hResultCategorias.Index, 2].Text = CStr(hResultCategorias["ID Prod"])
      TableViewOrden[hResultCategorias.Index, 3].Text = CStr(hResultCategorias["IDPO"])
      'iIndexG = TableViewOrden.Rows.Count
      lblIndex.Text = CStr(CInt(TableViewOrden.Rows.Count))
      Print lblIndex.Text
    Next
  Endif
  
  hResultCategorias = Null

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
   
End

Public Sub btnCantidad_Click()
  'btnOK.Enabled = False
  btnAgregar.Enabled = False
  
  Select Case Last.Tag
    Case "++"
      Inc tmpCantidad
    Case "--"
      Dec tmpCantidad
    Case Else
      tmpCantidad = tmpCantidad + CInt(Last.Tag)
  End Select
  
  lblCantidad.Text = "Cantidad: " & tmpCantidad
  
  If (tmpCantidad > 0) Then btnMenos.Enabled = True Else btnMenos.Enabled = False
  
  modVariables.s_sCantidadProd = tmpCantidad
  Print "s_sCantidadProd = " & modVariables.s_sCantidadProd
  
  If (tmpCantidad > 0) And ColumnView1[ColumnView1.Current.key][1] <> "" Then 
    'btnOK.Enabled = True
    btnAgregar.Enabled = True
  Else 
    btnAgregar.Enabled = False
  Endif

Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
End

Private Function productos_variantes(i_iLastProdId As Integer)

Dim iInd As Integer
Dim myControl As Control

  iInd = 0
  If (vBoxVariantes1 <> Null And vBoxVariantes2 <> Null And vBoxVariantes3 <> Null) = True Then
    Do While iInd <= (vBoxVariantes1.Children.Count + vBoxVariantes2.Children.Count + vBoxVariantes3.Children.Count) - 1
      For Each myControl In vBoxVariantes1.Children
        If Object.GetProperty(myControl, "Value") = True Then
          modUtils.insertaVariantePlatillo(i_iLastProdId, Object.GetProperty(myControl, "Tag"))
        Endif
        Inc iInd
      Next
      For Each myControl In vBoxVariantes2.Children
        If Object.GetProperty(myControl, "Value") = True Then
          modUtils.insertaVariantePlatillo(i_iLastProdId, Object.GetProperty(myControl, "Tag"))
        Endif
        Inc iInd
      Next
      For Each myControl In vBoxVariantes3.Children
        If Object.GetProperty(myControl, "Value") = True Then
          modUtils.insertaVariantePlatillo(i_iLastProdId, Object.GetProperty(myControl, "Tag"))
        Endif
        Inc iInd
      Next
      Inc iInd
    Loop
  Endif

Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)  
End

Private Sub AddItems(iIndex As Integer, i_IDProducto As Integer, i_Cantidad As Integer)
  
  TableViewOrden.Rows.Count = TableViewOrden.Rows.Count + 1
  
  TableViewOrden[iIndex, 0].Text = CStr(i_Cantidad)
  TableViewOrden[iIndex, 1].Text = CStr(ColumnView1[ColumnView1.Current.key][0])
  TableViewOrden[iIndex, 2].Text = CStr(i_IDProducto)
  TableViewOrden[iIndex, 3].Text = Null
  
Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
End

Private Function CommitItems(int_id_orden As Integer) As Boolean
  Dim sQuery As String
  Dim hResult, hResultCombos As Result
  Dim i_iLastOrdenProd As Integer
  Dim I As Integer
  Dim bReturn As Boolean
  
  bReturn = False
  
  'For I = 0 To TableViewOrden.Rows.count - 1

    'If TableViewOrden[int_row, 3].Text = "" Then 'Producto en la lista sin guardar
    'Cargar elementos de la orden por si existen
    sQuery = "SELECT * FROM `vw_prods_x_orden` where `Orden` = &1 and `Activo` = 1"
    Try hResultCombos = modVariables.c_Conn.Exec(sQuery, int_id_orden)
    If (hResultCombos <> Null) And hResultCombos.Available Then
      For I = 0 To TableViewOrden.Rows.count - 1
        If TableViewOrden[I, 3].Text <> "" Then 'Producto ya guardado, actualizar info solamente
          hResultCombos.MoveTo(I)
          sQuery = "id_prod_x_orden = &1"
          hResult = modVariables.c_Conn.Edit("tbl_prods_x_orden", sQuery, hResultCombos["IDPO"])
          i_iLastOrdenProd = hResultCombos["IDPO"]
          If CInt(TableViewOrden[I, 0].Text) <> hResultCombos["Cantidad"] Then
            hResult!bool_impreso = 0
          Endif
        Else 'Producto agregado a la orden
          hResult = modVariables.c_Conn.Create("tbl_prods_x_orden")
          hResult!dt_horafecha_pedido = Now()
          hResult!bool_impreso = 0
        Endif
        hResult!int_orden_id = int_id_orden
        hResult!int_producto_id = CInt(TableViewOrden[I, 2].Text)
        hResult!int_cantidad = CInt(TableViewOrden[I, 0].Text)
        hResult!bool_activo = 1
        hResult!int_tipo_precio = modVariables.i_intTipoPrecio
        Try hResult.Update()
        Try modVariables.c_Conn.Commit()
        i_iLastOrdenProd = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
        If i_iLastOrdenProd = 0 Then i_iLastOrdenProd = hResultCombos["IDPO"]
        productos_variantes(i_iLastOrdenProd)
      Next
    Else 
      For I = 0 To TableViewOrden.Rows.count - 1
        Try modVariables.c_Conn.Begin()
          hResult = modVariables.c_Conn.Create("tbl_prods_x_orden")
          hResult!int_orden_id = int_id_orden
          hResult!int_producto_id = CInt(TableViewOrden[I, 2].Text)
          hResult!int_cantidad = CInt(TableViewOrden[I, 0].Text)
          hResult!bool_activo = 1
          hResult!dt_horafecha_pedido = Now()
          hResult!bool_impreso = 0
          hResult!int_tipo_precio = modVariables.i_intTipoPrecio
          Try hResult.Update()
          Try modVariables.c_Conn.Commit()
        i_iLastOrdenProd = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
        productos_variantes(i_iLastOrdenProd)
      Next 
    Endif
    
    hResult = Null
    hResultCombos = Null
    
    sQuery = "SELECT * from vw_combos_productos where `ID Prod Rel` = &1 and Activo = 1"
    Print sQuery
    Try hResult = modVariables.c_Conn.Exec(sQuery, CInt(TableViewOrden[I, 2].Text))
  
    If (hResult <> Null) Then 'es un combo, agregar productos del combo
      Dim iCombo As Integer
      iCombo = i_iLastOrdenProd
      For Each hResult
        i_iLastOrdenProd = 0
        hResultCombos = Null
        
        Try modVariables.c_Conn.Begin()
          hResultCombos = modVariables.c_Conn.Create("tbl_prods_x_orden")
          hResultCombos!int_orden_id = int_id_orden
          hResultCombos!int_producto_id = hResult["ID Producto"]
          hResultCombos!int_cantidad = hResult["Cant. x Combo"]
          hResultCombos!bool_activo = 1
          hResultCombos!dt_horafecha_pedido = Now()
          hResultCombos!bool_impreso = 0
          hResultCombos!int_tipo_precio = modVariables.i_intTipoPrecio
          Try hResultCombos.Update()
        Try modVariables.c_Conn.Commit()
        
        hResultCombos = Null
        
        'Checamos si alguna opción está habilitada
        i_iLastOrdenProd = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
        
        Try modVariables.c_Conn.Begin()
          hResultCombos = modVariables.c_Conn.Create("tbl_combos_ordenes")
          hResultCombos!id_orden_id = iCombo
          hResultCombos!id_combo_id = hResult["ID Prod Rel"]
          hResultCombos!id_prod_x_orden_combo = hResult["ID Producto"]
          hResultCombos!id_prod_x_orden_parte_combo = i_iLastOrdenProd
          Try hResultCombos.Update()
        Try modVariables.c_Conn.Commit()
        'lee variantes si las hay para este producto
        productos_variantes(i_iLastOrdenProd)
      Next
    Endif
    'lee variantes si las hay para este producto
    'productos_variantes(i_iLastOrdenProd)
  'Next
  
  modVariables.b_FsAMProdsReturn = True
  hResult = Null
  bGuardado = True
  
  'Cargar elementos de la orden por si existen
  sQuery = "SELECT * FROM `vw_prods_x_orden` where `Orden` = &1 and `Activo` = 1"
  Try hResult = modVariables.c_Conn.Exec(sQuery, modVariables.i_intOrdenID)
  
  If (hResult <> Null) Then
    TableViewOrden.Rows.Count = 0
    lblIndex.Text = 0
    For Each hResult
      TableViewOrden.Rows.Count += 1
      TableViewOrden[hResult.Index, 0].Text = CStr(hResult["Cantidad"])
      TableViewOrden[hResult.Index, 1].Text = CStr(hResult["Producto"])
      TableViewOrden[hResult.Index, 2].Text = CStr(hResult["ID Prod"])
      TableViewOrden[hResult.Index, 3].Text = CStr(hResult["IDPO"])
      lblIndex.Text = CStr(CInt(TableViewOrden.Rows.Count))
      Print lblIndex.Text
    Next
  Endif
  
  If Not Error Then 
    bReturn = True
    Return bReturn
  Endif 
  
Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End


Public Sub colorear(tabla As TableView, fondoimpar As Variant, letraimpar As Variant, fondopar As Variant, letrapar As Variant) 
  Dim a As Integer
  Dim b As Integer
  For a = 0 To tabla.rows.count - 1
     If Par(a) = False Then 
        For b = 0 To tabla.columns.count - 1
        tabla[a, b].Background = fondoimpar
        tabla[a, b].Foreground = letraimpar
        Next 
    Else 
        For b = 0 To tabla.columns.count - 1
        tabla[a, b].Background = fondopar
        tabla[a, b].Foreground = letrapar
        Next 
     End If
  Next 
  tabla.Refresh

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End 

Public Function Par(a As Integer) As Boolean
  If Round(a / 2, 0) * 2 = a Then
    'el numero es par
    Return 1
  Else
    Return 0
  End If

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub TableViewOrden_Click()

Print TableViewOrden[TableViewOrden.Row, 3].Text

  If TableViewOrden.column = 0 And TableViewOrden[TableViewOrden.Row, 3].Text <> "" Then
    TableViewOrden.Edit
  Endif
  
  If TableViewOrden.Row >= 0 Then
    btnEliminar.Enabled = True
  Else
    btnEliminar.Enabled = False
  Endif
Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub TableViewOrden_Save(Row As Integer, Column As Integer, Value As String)

  TableViewOrden[Row, Column].Text = Value
  

Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnEliminar_Click()
Dim sQuery As String
Dim iIDPO As Integer

  FAuth.ShowModal
  If modVariables.i_UsuarioConectado <= 0 Then 
    'Me.Close
    Message.Error("Necesita autorizacion para eliminar productos")
    Return
  Endif

  If TableViewOrden[TableViewOrden.Row, 3].Text <> "" Then 'Producto en la orden pero sin guardar
    iIDPO = TableViewOrden[TableViewOrden.Row, 3].Text
    'sQuery = "DELETE FROM `tbl_prods_x_orden` WHERE (`id_prod_x_orden` = '&1');"
    sQuery = "UPDATE `tbl_prods_x_orden` SET `bool_activo` = '0' WHERE (`id_prod_x_orden` = '&1');"
    Try modVariables.c_Conn.Exec(sQuery, iIDPO)
    Message.Info("El producto eliminado ha sido registrado en el corte de hoy")
  Endif
  
  TableViewOrden.Rows.Remove(TableViewOrden.Row)
  lblIndex.Text = CStr(CInt(lblIndex.Text - 1))
  
Catch
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnOK_Click()
Dim qString As String
'Dim hResultOrdenes As Result

  If (Message.Question("Desea guardar y salir?", "Si, Guardar", "No, Cancelar") = 1) Then

    If bGuardado = False Then CommitItems(modVariables.i_intOrdenID)

    'Actualizar el grid de la pantalla principal
    FMain1.gridMainOrden.Rows.Count = 0
    'Obtiene la lista de órdenes abiertas  
    qstring = "SELECT" 
    qstring &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
    qstring &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
    qstring &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
    qstring &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
    qstring &= "  `tbl_consecutivo`.`chr_consecutivo` as `TicketNR`, "
    qString &= "  `tbl_clientes`.`id_cliente` as `ID Cliente`,"
    qString &= "  `tbl_clientes`.`chr_email` as `Cliente`"
    qstring &= "  From `tbl_ordenes`"
    qstring &= "   left join `tbl_ordenes_x_clientes` on `tbl_ordenes_x_clientes`.`id_orden` = `tbl_ordenes`.`id_orden_id`"
    qstring &= "   left join `tbl_clientes` on `tbl_ordenes_x_clientes`.`id_cliente` = `tbl_clientes`.`id_cliente`"
    qstring &= "   inner join `tbl_consecutivo` on `tbl_consecutivo`.`id_consecutivo` = `tbl_ordenes`.`int_consecutivo`"
    qstring &= "   where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
     
    FMain1.hResultOrdenes = Null
    Try FMain1.hResultOrdenes = modVariables.c_Conn.Exec(qString)
    If Error Then 
      Print Error.Text
    Else
      'Llena el grid con las ordenes abiertas
      FMain1.gridMainOrden.Rows.Count = FMain1.hResultOrdenes.Count
      FMain1.gridOrdenDetails.Rows.Count = 0
      'hResultOrdenes = Null
    Endif
    FsAMProdsTodo.Close
  Endif

End

Private Sub imprimeOrden()
  
  Dim sTempFile, sCommand As String

  
  Me.Enabled = False
  'CommitItems()
  Inc Application.Busy
  'Dec iTipoPrintJob
  PrinterOrden.PaperWidth = 80
  sTempFile = User.Home &/ "Tickets/ticketOrden_" & modVariables.i_intTicketNR & "-" & Format(Now, "yyyy-mm-dd--hh-nn-ss") & ".pdf"
  PrinterOrden.OutputFile = sTempFile
  PrinterOrden.Print 

  'Print sTempFile
  sCommand = "lp " & sTempFile 
  Shell sCommand Wait
  
  Dec Application.Busy
  Me.Enabled = True
  
End


Public Sub btnImprimir_Click()

  If bGuardado = False Then 
    CommitItems(modVariables.i_intOrdenID)
  Endif

  imprimeOrden()

End

Public Sub PrinterOrden_Draw()

Dim PRINT_MARGIN As Float 
Dim docV As String
Dim hImage As Image

Dim tmpMesa As Integer
Dim rResult As Result
Dim iInc As Integer

Dim myResult As Result

  PRINT_MARGIN = 400
  iInc = 1
  hImage = Image.Load("Imagenes" &/ "logoTicket.png")
  hImage.Opacity(0.3)
  Paint.MoveTo(500, 305)
  Paint.DrawImage(hImage, 12, 1, hImage.Width * 7, hImage.Height * 7)
  
  Try rResult = modVariables.c_Conn.Exec("Select int_mesa from tbl_ordenes where id_orden_id = &1", modVariables.i_intOrdenID)
  
  tmpMesa = rResult[0]
  
  rResult = Null
  
  Paint.Font = Font["Helvetica, Regular, 10"]
  Paint.MoveTo(1, 405)
  docV = Format(Now, "dddd dd mmmm yyyy, hh:nn:ss")
  Paint.DrawRichText(docV, PRINT_MARGIN, PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)
  Paint.Font = Font["Helvetica, Bold, 20"]
  docV = "Orden: " & modVariables.i_intOrdenID
  Paint.DrawRichText(docV, PRINT_MARGIN, 300 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)
  docV = "Mesa: " & tmpMesa
  Paint.DrawRichText(docV, PRINT_MARGIN, 600 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)
  
  Try rResult = modVariables.c_Conn.Exec("SELECT * FROM vw_prods_x_orden where `Orden` = &1 and `Activo` = '1' and `Tipo Precio` = &2 ", modVariables.i_intOrdenID, modVariables.i_intTipoPrecio)
  
  If (rResult <> Null) And rResult.Available Then
    iTipoPrintJob = Message.Question("¿Desea imprimir Toda la orden o los Ultimos agregados?", "Toda la orden", "Ultimos Agregados", "Cancelar")
    If iTipoPrintJob <= 2 Then
      Select Case iTipoPrintJob
        Case 1
          For Each rResult
            docV = rResult["Cantidad"] & "\t" & rResult["Producto"]
            Paint.Font = Font["Helvetica, Bold, 11"]
            Paint.DrawRichText(docV, PRINT_MARGIN, (iInc * 350) + 900 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)
            Try myResult = modVariables.c_Conn.Exec("SELECT * FROM `vw_opciones_platillos_ticket` WHERE `IDPO` = &1", rResult["IDPO"])
            If (myResult <> Null) Then
              If myResult.Available Then 'Este producto tiene opciones, a imprimirlas iTipoPrintJob
                docV = ""
                For Each myResult
                  docV &= myResult["TxtTicket"] & " -- "
                Next
              Paint.Font = Font["Helvetica, Bold, 7"]
              Paint.DrawRichText(docV, PRINT_MARGIN, (iInc * 350) + 1100 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)  
              Endif
            Endif
            Try modVariables.c_Conn.Exec("UPDATE `tbl_prods_x_orden` SET `bool_impreso` = 1 WHERE `tbl_prods_x_orden`.`int_orden_id` = &1", modVariables.i_intOrdenID)
            Inc iInc
          Next
        Case 2
          For Each rResult
            If rResult["Impreso"] = 0 Then
              docV = rResult["Cantidad"] & "\t" & rResult["Producto"]
              Paint.Font = Font["Helvetica, Bold, 12"]
              Paint.DrawRichText(docV, PRINT_MARGIN, (iInc * 350) + 900 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)
              Try myResult = modVariables.c_Conn.Exec("SELECT * FROM `vw_opciones_platillos_ticket` WHERE `IDPO` = &1", rResult["IDPO"])
              If (myResult <> Null) Then
                If myResult.Available Then 'Este producto tiene opciones, a imprimirlas iTipoPrintJob
                  docV = ""
                  For Each myResult
                    docV &= myResult["TxtTicket"] & " -- "
                  Next
                Paint.Font = Font["Helvetica, Bold, 8"]
                Paint.DrawRichText(docV, PRINT_MARGIN, (iInc * 350) + 1100 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)  
                Endif
              Endif
              Try modVariables.c_Conn.Exec("UPDATE `tbl_prods_x_orden` SET `bool_impreso` = 1 WHERE `tbl_prods_x_orden`.`int_orden_id` = &1", modVariables.i_intOrdenID)
              Inc iInc
            Endif
          Next
        Case Else
      End Select
    Endif
  Endif
    

Catch
  Paint.Font = Font["Helvetica, Bold, 9"]
  docV = "ERROR: " & Error.Text
  Paint.DrawRichText(docV, PRINT_MARGIN, (iInc * 350) + 1100 + PRINT_MARGIN - (PrinterOrden.Page - 1) * (Paint.Height - PRINT_MARGIN * 2), Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterOrden.Count, Align.TopNormal)  
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)

End
