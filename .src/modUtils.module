' Gambas module file

'Private c_Conn As Connection
'Private $rData As Result
Public $dNow As Date

Public Sub escogeComandas()
Dim iInt, iJnc, iKnc As Integer
Dim iLastIndex As Integer
Dim bAdded, bFound As Boolean
Dim sQuery As String

  FTickets.rsRecords.MoveFirst
  iLastIndex = 0
  bAdded = False
  
  For Each FTickets.rsRecords
    If CFloat(FTickets.rsRecords["Total"]) = 0 'elige comandas de empleados o cortesía Then
      For iInt = 0 To FTickets.iSelected.Count - 1
        If FTickets.iSelected[iInt] = iLastIndex Then bAdded = True
      Next
      If Not bAdded Then 
        'Print "2.myfTotal: " & CStr(myfTotal)
        Print "2.CFloat(rsRecords[\"Total\"]: " & CStr(FTickets.rsRecords["Total"])
        FTickets.iSelected.Add(iLastIndex)
        bFound = True 'reset bfound
        bAdded = False
        Dec Application.Busy
      Endif 
    Else If CInt(FTickets.rsRecords["ID Pago"]) > 2
      For iInt = 0 To FTickets.iSelected.Count - 1
        If FTickets.iSelected[iInt] = iLastIndex Then bAdded = True
      Next
      If Not bAdded Then 
        'Print "3.myfTotal: " & CStr(myfTotal)
        Print "3.CFloat(rsRecords[\"Total\"]: " & CStr(FTickets.rsRecords["Total"])
        FTickets.iSelected.Add(iLastIndex)
        bFound = True 'reset bfound
        bAdded = False
        Dec Application.Busy
      Endif 
    Endif
    For iJnc = 0 To FTickets.listaComandasTarjeta.List.Count - 1
      If (FTickets.rsRecords["Comanda"] <> Null) Then
        bAdded = False
        If (CStr(FTickets.rsRecords["Comanda"]) = CStr(FTickets.listaComandasTarjeta.List[iJnc])) Or (CInt(FTickets.rsRecords["Comanda"]) <= 20) Then
          For iKnc = 0 To FTickets.iSelected.Count - 1
            If FTickets.iSelected[iKnc] = FTickets.rsRecords.Index Then bAdded = True
          Next
          If Not bAdded Then 
            If (CFloat(FTickets.rsRecords["Total"]) > 0) Then
              sQuery = "UPDATE `tbl_ordenes` SET `chr_status_orden` = 'Tarjeta Deb/Cred' WHERE (`id_orden_id` = &1);"
              If (FTickets.rsRecords["Referencia"] = "Efectivo") Then 
                sQuery = "UPDATE `tbl_ordenes_cerradas` SET `chr_referencia_notas` = 'Tarjeta Deb/Cred', `int_forma_pago` = '4' WHERE (`id_orden_id` = &1);"
              Else 
                sQuery = "UPDATE `tbl_ordenes_cerradas` SET `int_forma_pago` = '4' WHERE (`id_orden_id` = &1);"
              Endif 
              Try modVariables.c_Conn.Exec(sQuery, FTickets.rsRecords["ID Orden"])
              Print "Added2: " & FTickets.rsRecords.Index & gb.CrLf & FTickets.rsRecords["Comanda"]
              FTickets.iSelected.Add(FTickets.rsRecords.Index)
              bFound = True 'reset bfound
              bAdded = False
              Dec Application.Busy
            Endif 
          Endif
        Endif
      Endif
    Next
    Inc iLastIndex
  Next
  
End


Public Function dFixADate(cCDate As Date) As Date
Dim myDate As Date
Dim myValue As String
Dim sDay, sMonth, sYear As Integer

  myValue = Format(cCDate, "dd/mm/yyyy")
  sDay = CInt(Left(myValue, 2))
  sMonth = CInt(Mid(myValue, 4, 2))
  sYear = CInt(Right(myValue, 4))
  myDate = CDate("01/01/1980 00:00:00")
  myDate = DateAdd(myDate, gb.Year, sYear - 1980)
  myDate = DateAdd(myDate, gb.Month, sMonth - 1)
  myDate = DateAdd(myDate, gb.Day, sDay)
  myDate = DateAdd(myDate, gb.Hour, -18)
  
  Return myDate
End


Public Sub saveExcelFile(sPath As String, sData As String) 

Dim sCommand, sFileName, sFileManager As String
Dim iInc As Integer
  
  Inc Application.Busy
  'Print tempContents
  Dialog.Filter = ["*.xls", "Hoja de Cálculo Excel"]
  Dialog.Path = sPath
  
  If Dialog.SaveFile() Then Return
  If Right(Dialog.Path, 4) <> ".xls" Then Dialog.Path &= ".xls"
  File.Save(Dialog.Path, sData)
  'modUtils.doSQLDump()
 
  sCommand = "soffice --headless --convert-to xlsx:\"Calc MS Excel 2007 XML\" --outdir " & sPath & " " & Dialog.Path 
  'Print sCommand
  Shell sCommand Wait
  
  'sPath = Dialog.Path
  sFileName = ""
  For iInc = Len(Dialog.path) To 1 Step -1
    If Mid(Dialog.Path, iInc, 1) = "/" Then 
      sFileName = Right(Dialog.Path, (Len(Dialog.Path) - iInc))
      Break 
    Endif
  Next

  If Exist(sPath &/ sFileName) Then 
    Kill sPath &/ sFileName
  Endif
  
  'encontrar default de explorador de archivos
  sCommand = "xdg-mime query default inode/directory" 
  Shell sCommand To sFileManager
  For iInc = 1 To Len(sFileManager)
    If Mid(sFileManager, iInc, 1) = "." Then 
      sFileManager = Left(sFileManager, iInc - 1)
    Endif
  Next
  'Print sFileManager
  Dec Application.Busy

  sCommand = sFileManager & " " & sPath
  Shell sCommand 

Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)  
End


Public Function sendEmailFactura(iOrdenCerrada As Integer, Optional bSendMail As Boolean) As Integer

Dim hResult As Result
Dim sQuery As String
Dim fTotal As Float

  If Not bSendMail Then bSendMail = False
  hResult = Null
  modVariables.c_Conn.Begin()
    hResult = modVariables.c_Conn.Create("tbl_facturas")
    hResult!id_orden = iOrdenCerrada
    hResult!chr_nr_factura = "Por llenar"
    hResult.Update()
  modVariables.c_Conn.Commit()
   'If modVariables.iClienteID <= 0 Then Message.Info("Tendra que elegir cliente mas adelante")
  If bSendMail Then
    Dim Email As New SmtpClient
  
    Do While modVariables.iClienteID <= 0
      FBClientes.ShowModal
      If modVariables.iClienteID <= 0 Then
        Message.Error("Debe elegir un cliente")
      Else
        Exit
        Return 
      Endif
    Loop
    
    hResult = Null
    sQuery = "Select * from `tbl_ordenes_x_clientes` where id_orden = &1"
    Try hResult = modVariables.c_Conn.Exec(sQuery, iOrdenCerrada)
    
    If hResult = Null Or hResult.Available = False Then 'Sin cliente asignado para facturar
      hResult = Null
      modVariables.c_Conn.Begin()
        hResult = modVariables.c_Conn.Create("tbl_ordenes_x_clientes")
        hResult!id_orden = iOrdenCerrada
        hResult!id_cliente = modVariables.iClienteID
        hResult.Update()
      modVariables.c_Conn.Commit()
      
    Endif
    
    hResult = Null
    sQuery = "Select `chr_var_value` from `tbl_configs` where `chr_var_name` = &1"
    Try hResult = modVariables.c_Conn.Exec(sQuery, "email_host")
    If (hResult <> Null) And hResult.Available Then Email.Host = hResult["chr_var_value"]
    
    hResult = Null
    sQuery = "Select `chr_var_value` from `tbl_configs` where `chr_var_name` = &1"
    Try hResult = modVariables.c_Conn.Exec(sQuery, "email_user")
    If (hResult <> Null) And hResult.Available Then Email.User = hResult["chr_var_value"]
    
    hResult = Null
    sQuery = "Select `chr_var_value` from `tbl_configs` where `chr_var_name` = &1"
    Try hResult = modVariables.c_Conn.Exec(sQuery, "email_password")
    If (hResult <> Null) And hResult.Available Then Email.Password = hResult["chr_var_value"]
    
    'Email.Host = "smtpout.secureserver.net"
    'Email.User = "pedidos@tacosroy.com"
    'Email.Password = ".tacos1965."
    hResult = Null
    sQuery = "SELECT * FROM tbl_clientes where id_cliente = &1"
    Try hResult = modVariables.c_Conn.Exec(sQuery, modVariables.iClienteID)
    
    Email.From = "pedidos@tacosroy.com"
    Email.To.Add("carlos.revilla.m@gmail.com")
    'Email.To.Add("carlos.revilla.m@gmail.com") 'Opcional, agregar email de vladis
  
    Email.Subject = "Nueva factura Tacos Roy"
    Email.Body = hResult["chr_nombre"] & " " & hResult["chr_apellidos"] & "\n"
    Email.Body &= hResult["chr_email"] & "\n"
    Email.Body &= "Direccion:\n" & hResult["chr_direccion1"] & " #" & hResult["chr_num_ext"] & " - " & hResult["chr_num_int"] & "\n"
    Email.Body &= hResult["chr_direccion2"] & "\n" & hResult["chr_colonia"] & " CP:" & hResult["chr_CP"] & "\n"
    Email.Body &= hResult["chr_municipio"] & "\n" & hResult["chr_ciudad"] & " CP:" & hResult["chr_CP"] & "\n"
    Email.Body &= "Total: $" & fTotal & "\n"
    Email.Body &= "ID Orden Cerrada: " & iOrdenCerrada & "\n" 
    
    'Email.Add(File.Load(sTempFile), "application/pdf", "ticket_" & modVariables.i_intTicketNR & "-" & Format(Now, "yyyy-mm-dd") & ".pdf")
    Email.Send
  Else
    Message.Info("Tendra que asignar cliente a la factura mas adelante")
  Endif

Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)  
End


Public Function checaEstadoTurno(Optional dDate As Date) As Integer

Dim qString As String
Dim hResult, hResultIns As Result

If dDate = Null Then 
  dDate = Now
Else 
  dDate = dFixADate(dDate)
Endif 

  qString = "SELECT * FROM `db_tacosroy_" & modVariables.sPrefijoDB & "`.`tbl_control_fechas` ORDER BY `dt_fecha_calendario` DESC limit 1;"
  'qString = "SELECT * FROM `tbl_control_fechas` where DATE(`dt_fecha_calendario`) = Date(Now()) ORDER BY `dt_fecha_calendario` DESC limit 1;"
  'qString = "SELECT * FROM `tbl_control_fechas` where `dt_fecha_calendario` = CURRENT_DATE();"
  Print qString
  Try hResult = modVariables.c_Conn.Exec(qString)
  If (hResult <> Null) And hResult.Available Then
    modVariables.iCurrControlFecha = hResult["id_control_fechas"]
    If hResult["dt_finaliza_labores"] = Null Then
      Dim dtLapso As Integer
      dtLapso = DateDiff(hResult["dt_comienzo_labores"], Now, gb.Hour)
      If dtLapso > modVariables.iMaxTurno Then
        Message.Info("Han pasado más de " & modVariables.iMaxTurno & " hrs. desde el último turno abierto\nEl programa se cerrará ahora.\nFavor de REINICIAR APP y abrir una cuenta nueva.") 
        qString = "UPDATE `tbl_control_fechas` SET `dt_finaliza_labores` = Now() WHERE (`id_control_fechas` = &1);"
        Try modVariables.c_Conn.Exec(qString, hResult["id_control_fechas"])
        'Creamos un respaldo de la base de datos
        modUtils.doSQLDump() 
        FMain1.btnNuevaOrden.Enabled = False
        FMain1.btnModifOrden.Enabled = False
        FMain1.btnCancelOrden.Enabled = False
        FMain1.btnCerrarOrden.Enabled = False
        FMain1.btnImrpimeCuenta.Enabled = False
        FMain1.imgTurnoOpen.Visible = False
        FMain1.imgTurnoClosed.Visible = True
        Return 0
      Else  
        If (Message.Question("La cuenta del dia: " & hResult["dt_comienzo_labores"] & " aun sigue abierta, desea cerrarla o continuar?", "Cerrar Cuenta", "Continuar")) = 1 Then
          If DateDiff(Now(), hResult["dt_comienzo_labores"], gb.Hour) < modVariables.iMinTurno Then 
            Message.Info("Aún no se llega al mínimo de duración del turno\nEl turno no puede cerrarse aún.")
            modVariables.i_idControlFecha = hResult["id_control_fechas"]
            FMain1.imgTurnoOpen.Visible = True
            FMain1.imgTurnoClosed.Visible = False
            Return modVariables.i_idControlFecha
          Else 
            qString = "UPDATE `tbl_control_fechas` SET `dt_finaliza_labores` = Now() WHERE (`id_control_fechas` = &1);"
            Try modVariables.c_Conn.Exec(qString, hResult["id_control_fechas"])
            'Creamos un respaldo de la base de datos
            modUtils.doSQLDump() 
            FMain1.btnNuevaOrden.Enabled = False
            FMain1.btnModifOrden.Enabled = False
            FMain1.btnCancelOrden.Enabled = False
            FMain1.btnCerrarOrden.Enabled = False
            FMain1.btnImrpimeCuenta.Enabled = False
            FMain1.imgTurnoOpen.Visible = False
            FMain1.imgTurnoClosed.Visible = True
            Return hResult["id_control_fechas"]
          Endif
        Else 
          modVariables.i_idControlFecha = hResult["id_control_fechas"]
          FMain1.btnNuevaOrden.Enabled = True
          FMain1.imgTurnoOpen.Visible = True
          FMain1.imgTurnoClosed.Visible = False
          Return hResult["id_control_fechas"]
        Endif
      Endif
      modVariables.i_idControlFecha = hResult["id_control_fechas"]
      modVariables.s_controlString = hResult["chr_control"]
      FMain1.btnNuevaOrden.Enabled = True
      FMain1.btnModifOrden.Enabled = False
      FMain1.btnCancelOrden.Enabled = False
      FMain1.btnCerrarOrden.Enabled = False
      FMain1.btnImrpimeCuenta.Enabled = False
      FMain1.imgTurnoOpen.Visible = True
      FMain1.imgTurnoClosed.Visible = False
      Return modVariables.i_idControlFecha
    Else
      If Message.Question("El turno ha sido cerrado, desea abrir un turno nuevo?", "Si abrir", "Cancelar") = 1 Then
        
        Inc Application.Busy
        'Creamos un respaldo de la base de datos
        modUtils.doSQLDump()
        Dec Application.Busy
 
        hResultIns = Null
        modVariables.c_Conn.Begin()
        hResultIns = modVariables.c_Conn.Create("tbl_control_fechas")
        hResultIns!dt_fecha_calendario = Now()
        hResultIns!dt_comienzo_labores = Now()
        hResultIns.Update()
        modVariables.c_Conn.Commit()
        hResultIns = Null
        modVariables._cnnFechaInicio = Now()
        modVariables.i_idControlFecha = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
        FMain1.imgTurnoOpen.Visible = True
        FMain1.imgTurnoClosed.Visible = False
        Return modVariables.i_idControlFecha
      Else
        FMain1.btnModifOrden.Enabled = False
        FMain1.btnCancelOrden.Enabled = False
        FMain1.btnCerrarOrden.Enabled = False
        FMain1.btnImrpimeCuenta.Enabled = False
        FMain1.btnNuevaOrden.Enabled = False
        FMain1.imgTurnoOpen.Visible = False
        FMain1.imgTurnoClosed.Visible = True
        modVariables.i_idControlFecha = 0
      Endif
      
    Endif
   
  Else
    FMain1.btnModifOrden.Enabled = False
    FMain1.btnCancelOrden.Enabled = False
    FMain1.btnCerrarOrden.Enabled = False
    FMain1.btnImrpimeCuenta.Enabled = False
    FMain1.btnNuevaOrden.Enabled = False
    FMain1.imgTurnoOpen.Visible = False
    FMain1.imgTurnoClosed.Visible = True
    Message.Info("Debe abrir la cuenta del dia de hoy primero")
    Return
  Endif   
  Return modVariables.i_idControlFecha

Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)
  
End


Public Sub CreateDirTree(sDir As String)

Dim s As String
Dim stmpDir As String = "/"
  
  If sdir Begins "/" Then sdir = Right(sdir, -1)
  
  For Each s In Split(sDir, "/")
    stmpDir &= s & "/"
    If Exist(stmpdir) Then Continue
    Mkdir stmpdir
  Next

 Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)

 End
 
Public Function findPrice(iIDProducto As Integer, iTipoPrecio As Integer, iControlFechaStart As Integer, Optional iControlFechaEnd As Integer) As Float

Dim sQuery As String
Dim hResultPrecio As Result
Dim flMyPrice As Float

  sQuery = "select"
  sQuery &= " ANY_VALUE( `tbl_control_fechas`.`id_control_fechas`) AS `IDCF`,"
  sQuery &= " ANY_VALUE( `tbl_productos`.`id_producto` ) as `ID Prod`,"
  sQuery &= " ANY_VALUE( `tbl_productos`.`chr_nombre_prod` ) as `Producto`,"
  sQuery &= " ANY_VALUE( `tbl_precios_productos`.`dbl_precio` ) as `Precio`,"
  sQuery &= " ANY_VALUE( `tbl_precios_productos`.`dat_fecha_precio_activo` ) as `Fecha Precio`,"
  sQuery &= " ANY_VALUE( `tbl_precios_productos`.`int_tipo_precio` ) as `Tipo Precio`,"
  sQuery &= " ANY_VALUE( `tbl_precios_productos`.`bit_activo` ) as `Activo`"
  sQuery &= " From `tbl_precios_productos` "
  sQuery &= " left join `tbl_productos` on `tbl_productos`.`id_producto` = `tbl_precios_productos`.`id_producto`"
  sQuery &= " left join `tbl_control_fechas` on DATE(`tbl_control_fechas`.`dt_fecha_calendario`) = DATE(`tbl_precios_productos`.`dat_fecha_precio_activo`)"
  sQuery &= " where `tbl_productos`.`int_activo` = 1  and `tbl_precios_productos`.`bit_activo` = 1 and "
  sQuery &= "  `tbl_productos`.`id_producto` = &1 "
  sQuery &= "  and `tbl_precios_productos`.`int_tipo_precio` = &2"
  sQuery &= " order by `tbl_control_fechas`.`id_control_fechas` Desc"
  
  flMyPrice = -1
  hResultPrecio = Null
  Try hResultPrecio = modVariables.c_Conn.Exec(sQuery, iIDProducto, iTipoPrecio)
  
  If (hResultPrecio <> Null) And hResultPrecio.Available Then 
    For Each hResultPrecio
      If (hResultPrecio["IDCF"] <> Null) Then 
        If (hResultPrecio["IDCF"] >= iControlFechaStart) And (hResultPrecio["IDCF"] <= iControlFechaEnd) Then 
          If hResultPrecio["Activo"] = 1 Then flMyPrice = hResultPrecio["Precio"]
          Return flMyPrice
        Endif
      Endif
    Next
    If flMyPrice = -1 Then 
      hResultPrecio.MoveFirst
      If (hResultPrecio["Activo"] = 1) Then 
        flMyPrice = hResultPrecio["Precio"]
        Return flMyPrice
      Endif
    Endif
  Else 
    flMyPrice = 0
    Return flMyPrice
  Endif
   
  hResultPrecio = Null
  
  Return flMyPrice
  
Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)
  
End


Public Function ifNull(vToTest As Variant, vToSet As Variant) As Variant
  
  If (vToTest = Null) Then 
    Return vToSet 
  Else 
    Return vToTest
  Endif
  
End

Public Sub doSQLDump(Optional bFull As Boolean)
Dim sFilePath, fileName, tempFile As String

  FMain1.tmrUpdates.Enabled = False
   sFilePath = User.Home &/ modVariables.sCloudDirectory &/ "TRdumps" &/ Format(Now, "yyyy") &/ Format(Now, "mm") &/ Format(Now, "dd") '&/ modVariables.sPrefijoDB
  If Not Exist(sFilePath) Then modUtils.CreateDirTree(sFilePath)
  fileName = "mysqldb_" & modVariables.sPrefijoDB & "_" & CStr(Format(Now, "yyyy-mm-dd_hh-nn-ss")) 
  If Not bFull Then 
    tempFile = "mysqldump -u root -pt4a2x0a6 db_tacosroy_" & modVariables.sPrefijoDB & " tbl_consecutivo tbl_control_fechas tbl_gastos tbl_inventario tbl_ordenes tbl_ordenes_cerradas tbl_ordenes_descuento tbl_ordenes_personal tbl_precio_tipo_ordenes tbl_prods_orden_opciones tbl_prods_x_orden tbl_ticket_cons > " & sFilePath &/ fileName & ".sql"
  Else 
    tempFile = "mysqldump -u root -pt4a2x0a6 db_tacosroy_" & modVariables.sPrefijoDB & " > " & sFilePath &/ fileName & ".sql"
  Endif
  Print tempFile
  Inc Application.Busy
  Shell tempFile Wait
  Dec Application.Busy
  tempFile = "7za a -tzip -pt4a2x0a6 -mem=AES256 " & sFilePath &/ fileName & ".gz " & sFilePath &/ fileName & ".sql"
  Inc Application.Busy
  Shell tempFile Wait
  Dec Application.Busy
  If Not Error Then modVariables.cnfDBUpdates["Backups/backup_" & modVariables.sPrefijoDB] = "False"
  
  Try Kill sFilePath &/ fileName & ".sql"
  
  FMain1.tmrUpdates.Enabled = True
  
Catch 
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)
  
End


Public Function exportHTMLFile(hResult As Result, Optional wBody As Boolean, Optional iPadding As Integer) As String
Dim tempHTML As String
Dim iInt, iJnt As Integer  
  
  If Not iPadding Then iPadding = 0
  If Not wBody Then 
    tempHTML = "<body>"
    tempHTML &= "<table cellspacing=\"" & iPadding & "\" border=\"0\" cellpadding=\"" & iPadding & "\">" 
  Endif 
  
  tempHTML &= "<tr cellspacing=\"" & iPadding & "\" border=\"0\" cellpadding=\"" & iPadding & "\">" 
  For iInt = 0 To hResult.Fields.count - 1
    tempHTML &= "<td>" & hResult.Fields[iInt].Name & "</td>"
  Next
  tempHTML &= "</tr>" 
  hResult.MoveFirst
  For iJnt = 0 To hResult.Count - 1
    tempHTML &= "<tr cellspacing=\"" & iPadding & "\" border=\"0\" cellpadding=\"" & iPadding & "\">" 
    For iInt = 0 To hResult.Fields.count - 1
      tempHTML &= "<td>" & hResult[hResult.Fields[iInt].Name] & "</td>"
    Next 
    tempHTML &= "</tr>"
    hResult.MoveNext
  Next
  
  If Not wBody Then 
    tempHTML &= "</table>"
    tempHTML &= "</body>"
  Endif 

  Return tempHTML
  
Catch
Print Error.Text
  Dec Application.Busy
  Message.Error(Error.Where & ", " & Error.Text)
End

Public Function insertaVariantePlatillo(idProdOrden As Integer, idPlatillo As Integer) As Boolean

Dim sQueryString As String
  
  sQueryString = "INSERT INTO `tbl_prods_orden_opciones` (`id_prod_x_orden`, `id_variante_platillo`) VALUES (&1, &2)" 
  Try modVariables.c_Conn.Exec(sQueryString, idProdOrden, idPlatillo)
   
  If Error Then 
    Message.Error(Error.Text & ", " & Error.Where)
  Else
    Return True
  Endif
  
Catch
  Message.Error(Error.Text & ", " & Error.Where)
  Return False
End

Public Sub TimerClk_Timer() As String

  'Dim sTime As String
  
  'If Second(Now) = $i_iLast Then Return
  $dNow = Now
  modVariables.sTime = Format($dNow, "dddd dd mmmm yyyy, hh:nn:ss")
  Return CStr(modVariables.sTime)

End

Public Sub EnableDisableControls(cContainer As Container, tTag As String, bNewState As Boolean)
  
  Dim myControl As Control
  
  cContainer.Enabled = True
    For Each myControl In cContainer.Children
      If Object.GetProperty(myControl, "Tag") = tTag Then 
        'Print Object.GetProperty(myControl, "Name") & ": ON"
        Object.SetProperty(myControl, "Enabled", bNewState)
        'Print Object.GetProperty(myControl, bNewState)
      Endif
    Next
  
End

Public Sub CleanFormControls(cContainer As Container, tTag As String)
  
  Dim myControl As Control
  
  cContainer.Enabled = True
    For Each myControl In cContainer.Children
      If Object.GetProperty(myControl, "Tag") = tTag Then 
        'Print Object.GetProperty(myControl, "Name") & ": ON"
        If (Object.Is(Mycontrol, "DataControl")) Then 
          Try Object.SetProperty(myControl, "Value", "")
        Endif
        
        If (Object.Is(MyControl, "TextBox")) Then 
          Try Object.SetProperty(myControl, "Text", "")
        Endif
        
        If Error Then Print Error.Text
        'Print Object.GetProperty(myControl, bNewState)
      Endif
    Next
  
End

Public Sub ReadData(tbvData As Object, $rData As Result)

  Dim hField As ResultField
  Dim iInd As Integer
  'Dim iTemp As Integer

  Inc Application.Busy

  'tbvData.Rows.Count = 0

  tbvData.Columns.Count = $rData.Fields.Count

  For Each hField In $rData.Fields

    With hField

      Print .Name; ": "; .Type; " "; .Length; " "; .Result[0]

      tbvData.Columns[iInd].Text = .Name
      tbvData.Columns[iInd].Width = WidthFromType(tbvData, .Type, .Length, .Name)
      

    End With

    Inc iInd
  Next

  'tbvData.Rows.Count = $rData.Count
  
  tbvData.Refresh
Finally

  Dec Application.Busy

Catch

  Message.Error("Cannot exec request." & "\n\n" & DConv(Error.Text & ", " & Error.Where))

End

Private Function WidthFromType(hCtrl As Control, iType As Integer, iLength As Integer, sTitle As String) As Integer

  Dim iWidth As Integer

  Select Case iType

    Case gb.Boolean
      iWidth = hCtrl.Font.TextWidth(Str(False)) + 32

    Case gb.Integer
      iWidth = hCtrl.Font.TextWidth("1234567890") + 4

    Case gb.Long
      iWidth = hCtrl.Font.TextWidth("12345678901234567890") + 8

    Case gb.Float
      iWidth = hCtrl.Font.TextWidth(CStr(Pi) & "E+999") + 8

    Case gb.Date
      iWidth = hCtrl.Font.TextWidth(Str(Now)) + 16

    Case gb.String
      If iLength = 0 Then iLength = 64
      iLength = Min(32, iLength)
      iWidth = hCtrl.Font.TextWidth("X") * iLength + 4

  End Select

  iWidth = Max(iWidth, hCtrl.Font.TextWidth(sTitle) + 8)

  Return iWidth

End

Public Sub ShowImage(Row As Integer, picBox As PictureBox)
  
  Dim tempFile As String
  'Dim tempPicture As String
  'tempFile = Temp() & ".jpg"
  '$hClientes.MoveTo(Row)
  picBox.Picture = Null
  tempFile = Temp() & ".jpg"
  tempFile = User.Home &/ ".pictures" &/ CStr(Row + 1) & ".jpg"
  'tempPicture = $hClientes["foto_cliente"] 
  'File.Save(tempFile, tempPicture)
  picBox.Picture = Picture.Load(tempFile)
  
End

Public Sub refreshMainGridOrdenes()
Dim sQuery As String
Dim iInc, iJnc As Integer
  
  sQuery = "SELECT" 
  sQuery &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
  sQuery &= " `tbl_ordenes`.`int_nr_comanda` as `Comanda`," 
  sQuery &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
  sQuery &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
  sQuery &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
  sQuery &= "  `tbl_ticket_cons`.`id_ticketNrConsecutivo` as `IDTicketNR`, "
  sQuery &= "  `tbl_ticket_cons`.`chr_ticketConsecutivo` as `TicketNR`, "
  sQuery &= "  `tbl_clientes`.`id_cliente` as `ID Cliente`,"
  sQuery &= "  `tbl_clientes`.`chr_email` as `Cliente`"
  sQuery &= " From `tbl_ordenes`"
  sQuery &= "   left join `tbl_ordenes_x_clientes` on `tbl_ordenes_x_clientes`.`id_orden` = `tbl_ordenes`.`id_orden_id`"
  sQuery &= "   left join `tbl_clientes` on `tbl_ordenes_x_clientes`.`id_cliente` = `tbl_clientes`.`id_cliente`"
  sQuery &= "   inner join `tbl_ticket_cons` on `tbl_ticket_cons`.`id_ticketNrConsecutivo` = `tbl_ordenes`.`int_consecutivo`"
  sQuery &= "   where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
  
  With FMain1
    Try .hResultOrdenes = modVariables.c_Conn.Exec(sQuery)
    If (.hResultOrdenes <> Null) And .hResultOrdenes.Available Then
      .gridMainOrden.Rows.count = 0
      .gridMainOrden.header = GridView.Horizontal
      .gridMainOrden.grid = True
      .gridMainOrden.Columns.count = .hResultOrdenes.Fields.Count
      For iInc = 0 To .hResultOrdenes.Fields.Count - 1
        iJnc = 1
        Do While Mid(.hResultOrdenes.Fields[iInc].Name, iJnc, 1) <> "."
          iJnc += 1
        Loop
        .gridMainOrden.Columns[iInc].Text = Right(.hResultOrdenes.Fields[iInc].Name, Len(.hResultOrdenes.Fields[iInc].Name) - iJnc)
        .gridMainOrden.Columns[iInc].Width = 50 + 5 * Len(Right(.hResultOrdenes.Fields[iInc].Name, Len(.hResultOrdenes.Fields[iInc].Name) - iJnc))
      Next
      .gridMainOrden.Rows.Count = .hResultOrdenes.Count
      .btnImrpimeCuenta.Enabled = True
      'hResultOrdenes = Null
      .tmrUpdates.Enabled = True
    Endif 
  End With
    
End

