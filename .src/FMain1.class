' Gambas class file

Public hConn As Connection
Public hResultOrdenes As Result
Public qString As String

Private tmpOrden_prods_precio As Result
Private Const PRINT_MARGIN As Float = 1
Private rYPrint As Float

Public Sub Form_Open()

Dim hResult, hResultIns As Result
Dim tempFile As String
  
  Me.Maximized = True 
  
 'Abrimos la conexion que será utilizada en el proyecto
 modVariables.c_Conn = modConn.ConectarDB()
 
 If modVariables.c_Conn = Null Then
   Me.Close
   Return 
 Endif
  
  If modVariables.i_UsuarioConectado <= 0 And modVariables.c_Conn <> Null Then
    FAuth.ShowModal
    If modVariables.i_UsuarioConectado <= 0 Then 
      Me.Close
      Return
    Endif
  Endif
  
  lblTimer.Text = modUtils.TimerClk_Timer()
  
  gridMainOrden.header = GridView.Horizontal
  gridMainOrden.grid = True
  gridMainOrden.Rows.count = 0
  gridMainOrden.Columns.count = 5
  gridMainOrden.Columns[0].text = "Orden"
  gridMainOrden.Columns[1].text = "Hora"
  gridMainOrden.Columns[2].text = "Mesa"
  gridMainOrden.Columns[3].text = "Status"
  gridMainOrden.Columns[4].text = "TicketNR"
  
  gridMainOrden.Columns[0].width = 0
  gridMainOrden.Columns[1].width = 230
  gridMainOrden.Columns[2].width = 100
  gridMainOrden.Columns[3].width = 130
  gridMainOrden.Columns[4].width = 50

  gridOrdenDetails.header = GridView.Horizontal
  gridOrdenDetails.grid = True
  gridOrdenDetails.Rows.count = 0
  gridOrdenDetails.Columns.count = 7
  gridOrdenDetails.Columns[0].text = "Orden"
  gridOrdenDetails.Columns[1].text = "IDPO"
  gridOrdenDetails.Columns[2].text = "Producto"
  gridOrdenDetails.Columns[3].text = "ID Prod"
  gridOrdenDetails.Columns[4].text = "Cantidad"
  gridOrdenDetails.Columns[5].text = "Tipo Precio"
  gridOrdenDetails.Columns[6].text = "HoraFecha"
  
  gridOrdenDetails.Columns[0].width = 0
  gridOrdenDetails.Columns[1].width = 0
  gridOrdenDetails.Columns[2].width = 280
  gridOrdenDetails.Columns[3].width = 0
  gridOrdenDetails.Columns[4].width = 40
  gridOrdenDetails.Columns[5].width = 40
  gridOrdenDetails.Columns[6].width = 40
  
  qString = "SELECT * FROM `tbl_control_fechas` ORDER BY `dt_fecha_calendario` DESC limit 1;"
  'qString = "SELECT * FROM `tbl_control_fechas` where DATE(`dt_fecha_calendario`) = Date(Now()) ORDER BY `dt_fecha_calendario` DESC limit 1;"
  'qString = "SELECT * FROM `tbl_control_fechas` where `dt_fecha_calendario` = CURRENT_DATE();"
  Print qString
  Try hResult = modVariables.c_Conn.Exec(qString)
  If hResult.Available Then
    If hResult["dt_finaliza_labores"] = Null Then
      
      If (Message.Question("La cuenta del dia: " & hResult["dt_comienzo_labores"] & " aun sigue abierta, desea cerrarla o continuar?", "Cerrar Cuenta", "Continuar")) = 1 Then
        qString = "UPDATE `tbl_control_fechas` SET `dt_finaliza_labores` = Now() WHERE (`id_control_fechas` = &1);"
        Try modVariables.c_Conn.Exec(qString, hResult["id_control_fechas"])
        'Creamos un respaldo de la base de datos
        tempFile = "mysqldump -u root -pt4a2x0a6 db_tacosroy | gzip > " & User.Home &/ ".tacosroy/mysqldb_`date +%F`.sql.gz"
        Shell tempFile
      Endif
      
      modVariables.i_idControlFecha = hResult["id_control_fechas"]
      modVariables.s_controlString = hResult["chr_control"]
      btnModifOrden.Enabled = True
      btnCancelOrden.Enabled = True
      btnCerrarOrden.Enabled = True
      btnImrpimeCuenta.Enabled = True
    Else
      If Message.Question("El turno ha sido cerrado, desea abrir un turno nuevo?", "Si abrir", "Cancelar") = 1 Then
        If modVariables.i_UsuarioConectado <= 0 Then
          FAuth.ShowModal
          If modVariables.i_UsuarioConectado <= 0 Then 
            Me.Close
            Return
          Endif
        Endif
        hResultIns = Null
        modVariables.c_Conn.Begin()
        hResultIns = modVariables.c_Conn.Create("tbl_control_fechas")
        hResultIns!dt_fecha_calendario = Now()
        hResultIns!dt_comienzo_labores = Now()
        hResultIns.Update()
        modVariables.c_Conn.Commit()
        hResultIns = Null
      Else
        btnModifOrden.Enabled = False
        btnCancelOrden.Enabled = False
        btnCerrarOrden.Enabled = False
        btnImrpimeCuenta.Enabled = False
        btnNuevaOrden.Enabled = False
        Return
      Endif
      
    Endif
   
  Else
    btnNuevaOrden.Enabled = False
    Message.Info("Debe abrir la cuenta del dia de hoy primero")
    Return
  Endif 
  
  hResult = Null
  
  'Obtiene la lista de órdenes abiertas  
  qString = "SELECT" 
	qstring &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
	qstring &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
	qstring &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
	qstring &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
  qstring &= "  `tbl_consecutivo`.`chr_consecutivo` as `TicketNR`"
  qstring &= " From `tbl_ordenes`"
  qstring &= " inner join `tbl_consecutivo` on `tbl_consecutivo`.`id_consecutivo` = `tbl_ordenes`.`int_consecutivo`"
  qstring &= " where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
  
  'qString = "SELECT" 
  Try hResultOrdenes = modVariables.c_Conn.Exec(qString)
  If Error Then 
    Print Error.Text
  Else
    'Llena el grid con las ordenes abiertas
    gridMainOrden.Rows.Count = hResultOrdenes.Count
    'hResultOrdenes = Null
  Endif
  
  Catch
    Print Error.Text
    Message.Error(Error.Text & ", " & Error.Where)
End

Public Sub Button7_Click()

  modVariables.c_Conn.Close
  Me.Close

Catch
  Print Error.Text
End

Public Sub btnNuevaOrden_Click()

Dim qString As String
Dim hResult As Result

  If (Message.Question("Desea crear una nueva orden?", "Sí, crear", "NO, Cancelar") = 1) Then
    
    'Antes que nada, se debe elegir mesa
    FMesas.ShowModal
    If modVariables.s_strMesaTemp = "" Or modVariables.i_intIDPersonal = 0 Then 
      Return
    Endif
    
    'checamos el consecutivo siguiente
    Try hResult = modVariables.c_Conn.Exec("SELECT * FROM tbl_consecutivo order by id_consecutivo Desc Limit 1")
    modVariables.i_intTicketNR = CInt(hResult[1])
    
    hResult = Null
    
    'Inserta nuevo consecutivo en tabla de consecutivos
    Try modVariables.c_Conn.Begin()
    hResult = modVariables.c_Conn.Create("tbl_consecutivo")
    hResult!chr_consecutivo = CInt(modVariables.i_intTicketNR + 1)
    Try hResult.Update()
    Try modVariables.c_Conn.Commit()
    hResult = Null

    'Una vez obtenido el consecutivo, creamos una orden y guardamos el consecutivo
    Try modVariables.c_Conn.Begin()
    hResult = modVariables.c_Conn.Create("tbl_ordenes")
    hResult!dt_horafecha_orden = Now()
    hResult!int_mesa = modVariables.i_intIDMesaTemp
    hResult!int_consecutivo = modVariables.i_intTicketNR
    hResult!chr_status_orden = "Abierta"
    hResult!id_control_fecha = modVariables.i_idControlFecha
    Try hResult.Update()
    Try modVariables.c_Conn.Commit()

    modVariables.i_intOrdenID = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
    hResult = Null
    
    'Le asignamos la orden a un mesero
    Try modVariables.c_Conn.Begin()
    hResult = modVariables.c_Conn.Create("tbl_ordenes_personal")
    hResult!id_orden_id = modVariables.i_intOrdenID
    hResult!id_personal = modVariables.i_intIDPersonal
    Try hResult.Update()
    Try modVariables.c_Conn.Commit()
    hResult = Null
    
    'Definimos el tipo de precios de esta orden
    Try modVariables.c_Conn.Begin()
    hResult = modVariables.c_Conn.Create("tbl_precio_tipo_ordenes")
    hResult!id_orden = modVariables.i_intOrdenID
    hResult!id_tipo_precio = modVariables.i_intTipoPrecio
    Try hResult.Update()
    Try modVariables.c_Conn.Commit()
    hResult = Null
      
    FComandasN.ShowModal

  Endif
  
  Catch
    Print (Error.Text & ", " & Error.Where)
    Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnCancelOrden_Click()

Dim sQuery As String

  If (Message.Question("Desea cancelar la orden seleccionada?" & gb.Cr & "Este paso es irreversible", "Sí, Cancelar", "No, Continuar") = 1) Then
    Print gridMainOrden.Row
    
    FAuth.ShowModal
    If modVariables.i_UsuarioConectado <= 0 Then 
      Message.Error("No tiene autorizacion para Cancelar")
      Return
    Else 
      hResultOrdenes.MoveTo(gridMainOrden.Row)
      sQuery = "UPDATE  `tbl_ordenes` SET  `chr_status_orden` =  'Cancelada', `dt_horafecha_orden` = Now(), `chr_status_orden` = 'Cancelada' WHERE `tbl_ordenes`.`id_orden_id` =&1"
      
      gridMainOrden.Rows.Count = 0
      Try modVariables.c_Conn.Exec(sQuery, hResultOrdenes[0])
      
      'Mostrar pantalla de cobrar con 0 pesos
      FCobrar.txtReferenciaPago.Text = "CANCELADA"
      FCobrar.txtReferenciaPago.Visible = True
      FCobrar.btnAplicaDesc.Visible = False
      FCobrar.lblDescuento.Visible = False
      FCobrar.txtDescuento.Visible = False
      FCobrar.cmbFormaPago.Enabled = False
      FCobrar.btnOK.Enabled = True
      
      FCobrar.ShowModal()

      sQuery = "SELECT" 
      sQuery &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
      sQuery &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
      sQuery &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
      sQuery &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
      sQuery &= "  `tbl_consecutivo`.`chr_consecutivo` as `TicketNR`"
      sQuery &= " From `tbl_ordenes`"
      sQuery &= " inner join `tbl_consecutivo` on `tbl_consecutivo`.`id_consecutivo` = `tbl_ordenes`.`int_consecutivo`"
      sQuery &= " where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
      
      Try hResultOrdenes = modVariables.c_Conn.Exec(sQuery)
      gridMainOrden.Rows.Count = 0
      gridMainOrden.Rows.Count = hResultOrdenes.Count
    Endif
  Endif
  
Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnCerrarOrden_Click()
  
  Dim intResp As Integer
  Dim qString As String
  
  intresp = Message.Question("Desea cerrar/cobrar la orden No: " & modVariables.i_intOrdenID & "?", "Cerrar", "Cancelar")
  Select Case intresp
    Case 1
      FCobrar.ShowModal
    Case Else
      Message("No se hara nada")
  End Select
  
  qString = "SELECT" 
	qstring &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
	qstring &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
	qstring &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
	qstring &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
  qstring &= "  `tbl_consecutivo`.`chr_consecutivo` as `TicketNR`"
  qstring &= " From `tbl_ordenes`"
  qstring &= " inner join `tbl_consecutivo` on `tbl_consecutivo`.`id_consecutivo` = `tbl_ordenes`.`int_consecutivo`"
  qstring &= " where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
  
  'qString = "SELECT" 
  Try hResultOrdenes = modVariables.c_Conn.Exec(qString)
  If Error Then 
    Print Error.Text
  Else
    'Llena el grid con las ordenes abiertas
    gridMainOrden.Rows.Count = hResultOrdenes.Count
    'hResultOrdenes = Null
  Endif
  
End

Public Sub Button5_Click()

  FConfigs.ShowModal
  
End

Public Sub Timer1_Timer()

  lblTimer.Text = modUtils.TimerClk_Timer()
  
End


Public Sub gridMainOrden_Data(Row As Integer, Column As Integer)

  Try hResultOrdenes.moveTo(Row)
  If Error Then 
    Print Error.Text 
  Else
    If row Mod 2 = 0 Then gridMainOrden.Data.Background = Color.RGB(115, 115, 115)
    gridMainOrden.Data.text = Str(hResultOrdenes[gridMainOrden.Columns[column].text])
  Endif

Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
  
End


Public Sub gridMainOrden_DblClick()

Dim qString As String
Dim intTempOrder As Integer
Dim myResult As Result

  If modVariables.i_idControlFecha <> 0 Then
    btnNuevaOrden.Enabled = True
    gridOrdenDetails.Rows.Count = 0
    intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
    modVariables.i_intOrdenID = hResultOrdenes["Orden"]
    modVariables.i_intTicketNR = hResultOrdenes["TicketNR"]
    modVariables.s_strMesaTemp = hResultOrdenes[2]
    
    qString = "SELECT id_tipo_precio FROM tbl_precio_tipo_ordenes where id_orden = &1;"
    Try myResult = modVariables.c_Conn.Exec(qString, modVariables.i_intOrdenID)
    
    modVariables.i_intTipoPrecio = myResult[0]
    
    myResult = Null
    
    btnCancelOrden.Enabled = True
    btnModifOrden.Enabled = True
    btnCerrarOrden.Enabled = True
  
    qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` order by `HoraFecha` Asc"  
    
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, hResultOrdenes[0]) ' , modVariables.i_intTipoPrecio)
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
     Else 
      'Message(qString & ", " & hResultOrdenes[0])
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
    Endif
  Endif
  
If gridMainOrden.Row > 0 Then
  btnImrpimeCuenta.Enabled = True
  btnCancelOrden.Enabled = True
  btnCerrarOrden.Enabled = True
  btnModifOrden.Enabled = True
Endif

Catch
  Message.Error(Error.Text & ", " & Error.Where)

  

End


Public Sub gridMainOrden_Click()

Dim qString As String
Dim intTempOrder As Integer
Dim myResult As Result

  If modVariables.i_idControlFecha <> 0 Then
    btnNuevaOrden.Enabled = True
    gridOrdenDetails.Rows.Count = 0
    intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
    modVariables.i_intOrdenID = hResultOrdenes["Orden"]
    modVariables.i_intTicketNR = hResultOrdenes["TicketNR"]
    modVariables.s_strMesaTemp = hResultOrdenes[2]
    
    qString = "SELECT id_tipo_precio FROM tbl_precio_tipo_ordenes where id_orden = &1;"
    Try myResult = modVariables.c_Conn.Exec(qString, modVariables.i_intOrdenID)
    
    modVariables.i_intTipoPrecio = myResult[0]
    
    myResult = Null
    
    btnCancelOrden.Enabled = True
    btnModifOrden.Enabled = True
    btnCerrarOrden.Enabled = True
  
    qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` order by `HoraFecha` Asc"  
    
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, hResultOrdenes[0]) ' , modVariables.i_intTipoPrecio)
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
     Else 
      'Message(qString & ", " & hResultOrdenes[0])
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
    Endif
  Endif
  
If gridMainOrden.Row > 0 Then
  btnImrpimeCuenta.Enabled = True
  btnCancelOrden.Enabled = True
  btnCerrarOrden.Enabled = True
  btnModifOrden.Enabled = True
Endif

Catch
  Message.Error(Error.Text & ", " & Error.Where)

End

Public Sub gridMainOrden_KeyRelease()

Dim qString As String
Dim intTempOrder As Integer

  gridOrdenDetails.Rows.Count = 0
  intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
  modVariables.i_intOrdenID = hResultOrdenes["Orden"]
  'modVariables.i_intTicketNR = hResultOrdenes["TicketNR"]
  modVariables.s_strMesaTemp = hResultOrdenes[2]
  
  btnCancelOrden.Enabled = True
  btnModifOrden.Enabled = True
  btnCerrarOrden.Enabled = True

  qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` = 1 and `Tipo Precio` = &2  order by `HoraFecha` Asc"  
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, hResultOrdenes[0], modVariables.i_intTipoPrecio)
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
     Else 
      'Message(qString & ", " & hResultOrdenes[0])
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
    Endif
  
If gridMainOrden.Row > 0 Then btnImrpimeCuenta.Enabled = True

End


Public Sub gridOrdenDetails_Data(Row As Integer, Column As Integer)

  Try tmpOrden_prods_precio.moveTo(Row)
  If Error Then Print Error.text
  
  Try gridOrdenDetails.Data.text = Str(tmpOrden_prods_precio[gridOrdenDetails.Columns[column].text])  
  If Error Then Print Error.text
  
  If row Mod 2 = 0 Then gridOrdenDetails.Data.Background = Color.RGB(115, 115, 115)

End


Public Sub btnModifOrden_Click()

  If (Message.Question("Desea modificar la orden seleccionada?", "Sí, Modificar", "No, Cancelar") = 1) Then
    FComandasN.ShowModal
  Endif

End

Public Sub btnImrpimeCuenta_Click()
Dim sTempFile, sCommand As String

  Me.Enabled = False
  PrinterCuenta.PaperWidth = 80
  Inc Application.Busy
  sTempFile = User.Home &/ "Tickets/ticketOrden_" & modVariables.i_intTicketNR & "-" & modUtils.convierteFechaFormatoHora(Now) & ".pdf"
  'sTempFile = Subst(" ", )
  sTempFile = Replace(sTempFile, " ", "-")
  PrinterCuenta.OutputFile = sTempFile
  PrinterCuenta.Print()
  'imprimir archivo generado utilizando bash
  sCommand = "lpr " & sTempFile
  Shell sCommand
  
  Dec Application.Busy
  Me.Enabled = True

End

Public Sub PrinterCuenta_Draw()

  Dim sQuery As String
  Dim hResult, rResultProxOr, rResultSuc, rResultVar, rResultDetail, rNombreVar As Result
  Dim docV As New String[3]
  Dim sTemporal As String[]
  Dim hImage As Image
  Dim rResultPromos As Result
  Dim flTemporal As Float
  Dim iInc As Integer
  
  Dim sArray As String[] = Split(File.Load(User.Home &/ "Templates/ticketprevio.html"), gb.Newline, "", True)
  Dim sHTML As String
  
  iInc = 1
  sHTML = sArray.Join(gb.Newline)
  
  'If txtRecibido.Text = "" Then 
  '  Message.Error("Indique la cantidad recibida por favor")
  '  txtRecibido.SetFocus
  '  Return
  'Endif
    
  'lblCambio.Text = "$" & CStr(CFloat(txtRecibido.Text) - fTotal)
  
  hImage = Image.Load(User.Home &/ ".tacosroy/pictures" &/ "logoTicket.png")
  hImage.Opacity(0.3)
  Paint.MoveTo(1, 105)
  Paint.DrawImage(hImage, 12, 600, hImage.Width * 7, hImage.Height * 7)
  
  rYPrint = 250 'PRINT_MARGIN - (PrinterCobrar.Page - 1) * (Paint.Height - PRINT_MARGIN * 2)
  
  Paint.Font = Font["Helvetica"]
  sHTML = Replace(sHTML, "@@DateTime@@", Format(Now(), "dddd, yyyy-mm-dd hh:nn"))
  
  
  sHTML = Replace(sHTML, "@@OrdenNr@@", CStr(modVariables.i_intOrdenID))
  sHTML = Replace(sHTML, "@@TicketNr@@", CStr(modVariables.i_intTicketNR))
  
  sQuery = "SELECT * FROM tbl_datos_sucursal where id_sucursal = 1"
  Try rResultSuc = modVariables.c_Conn.Exec(sQuery)
  
  sHTML = Replace(sHTML, "@@NombreSucursal@@", CStr(rResultSuc["chr_nombre"]))
  sHTML = Replace(sHTML, "@@DatosSuc1@@", CStr(rResultSuc["chr_dir1"]))
  sHTML = Replace(sHTML, "@@DatosSuc2@@", CStr(rResultSuc["chr_dir2"]))
  sHTML = Replace(sHTML, "@@DatosSuc3@@", CStr(rResultSuc["chr_dir3"]))
  sHTML = Replace(sHTML, "@@TelefonoSuc@@", CStr(rResultSuc["chr_telefono1"]))
  
  'aqui va el calculo con print true
  sTemporal = FCobrar.sCalculaCosto()
  sHTML = Replace(sHTML, "@@DetalleOrden@@", sTemporal[0])
  sHTML = Replace(sHTML, "@@Total@@", sTemporal[1])
  
  'sHTML = Replace(sHTML, "@@Recibido@@", txtRecibido.Text)
  'sHTML = Replace(sHTML, "@@Cambio@@", CStr(CFloat(txtRecibido.Text - fTotal) & ".00"))

  PrinterCuenta.PaperWidth = 80
  Paint.DrawRichText(sHTML, PRINT_MARGIN, rYPrint + 20, Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterCuenta.Count, Align.TopNormal)
  
Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
End



Public Sub mnuConfig_Click()

  FConfigs.ShowModal

End

Public Sub mnuTools_Click()

  FReports.ShowModal()

End

Public Sub mnuSalir_Click()

  modVariables.c_Conn.Close
  Me.Close

End

Public Sub mnuReTickets_Click()

  FReimpTickets.ShowModal

End

Public Sub mnuABCProds_Click()

  FProductos.ShowModal()

End

Public Sub mnuInsumos_Click()

  FInsumos.ShowModal

End

Public Sub mnuRespaldo_Click()

Dim tempFile As String
  'Creamos un respaldo de la base de datos
  Inc Application.Busy
  'mysqldump -uroot -proot theitstuff > theitstuff.sql; 
  tempFile = "mysqldump -u root -pt4a2x0a6 db_tacosroy | gzip > " & User.Home &/ ".tacosroy/mysqldb_`date +%F`.sql.gz"
  Shell tempFile
  Dec Application.Busy

End

