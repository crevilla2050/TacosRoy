' Gambas class file

Public hConn As Connection
Public hResultOrdenes As Result
Public qString As String
Private bAdminMode As Boolean
Private tmpOrden_prods_precio As Result
Private Const PRINT_MARGIN As Float = 150
Private rYPrint As Float

Public Sub Form_Open()

Dim hResult As Result
Dim sLoadDB As String
'Dim iInc, iJnc As Integer
Dim sTemp As String
  
  Me.Maximized = True 
  If Not Exist(User.Home &/ ".tacosroy/tacosroy.conf") Then 
    Message.Error("No se ha encontrado archivo de configuración")
    Return 
    Me.Close
  Else 
    modVariables.cnfConfigFile = New Settings(User.Home &/ ".tacosroy/tacosroy.conf")
    modVariables.sPrefijoDB = modVariables.cnfConfigFile["DB/Prefijo"]
    modVariables.sCloudDirectory = modVariables.cnfConfigFile["Application/CloudDirectory"]
    
  Endif
  
  modVariables.c_Conn = modConn.ConectarDB()
  
  If (modVariables.c_Conn = Null) Then
    Message.Error("No se pudo realizar conexion a la Base de Datos")
    Me.Close
    Return 
  Endif
  
  Me.Title = Application.Version & " - " & modVariables.sPrefijoDB

  modVariables.cnfDBUpdates = New Settings(User.Home &/ modVariables.sCloudDirectory &/ "TacosRoy2.18/TacosRoy/updates.conf")
  modVariables.iMinTurno = modVariables.cnfDBUpdates["Application/MinDuracionTurno"]
  modVariables.iMaxTurno = modVariables.cnfDBUpdates["Application/MaxDuracionTurno"]
  bAdminMode = modVariables.cnfDBUpdates["Application/MaxDuracionTurno"]
  sTemp = "Debug/debug_" & modVariables.sPrefijoDB
  modVariables.bDebugTickets = modVariables.cnfDBUpdates[sTemp]
  If modVariables.iMaxTurno <= modVariables.iMinTurno Then 
    Message.Error("Por favor cheque duración de turnos en el archivo de configuración")
    Me.Close
    'Me.Quit 
    Return
  Endif
  'mnuReportes.Visible = modVariables.bDebugTickets

  If modVariables.i_UsuarioConectado <= 0 And (modVariables.c_Conn <> Null) Then
    FAuth.ShowModal
    If modVariables.i_UsuarioConectado <= 0 Then 
      Message.Error("Autorización incorrecta")
      'Me.Quit
      Me.Close 
      Return 
    If modVariables.i_UsrLevel >= 4 Then btnCancelOrden.Enabled = True
    Endif
  Endif
  
  sLoadDB = modVariables.cnfDBUpdates["Updates/update_" & modVariables.sPrefijoDB]
  
  If sLoadDB = "True" Then 
    modLoadDB.doLoadDB()
  Endif

  lblTimer.Text = modUtils.TimerClk_Timer()
  
  mnuReTickets.Checked = False
  
  hResult = Null
  qString = "SELECT `dt_inicio_operaciones` FROM tbl_datos_sucursal where `id_sucursal` = 1;"
  Try hResult = modVariables.c_Conn.Exec(qString)
  modVariables._cnnComienzoLabores = CDate(hResult[0])
  
  modVariables.i_idControlFecha = modUtils.checaEstadoTurno(Now)
  
  If modVariables.i_idControlFecha = 0 Then
   ' modVariables.i_dtComienzoLabores = modUtils.checaEstadoTurno(modVariables._cnnComienzoLabores)
    Message.Info("No hay turno abierto, debe abrir uno para poder ingresar ordenes")
    btnCancelOrden.Enabled = False
    btnCerrarOrden.Enabled = False
    'btnImrpimeCuenta.Enabled = False
    btnModifOrden.Enabled = False
    btnNuevaOrden.Enabled = False
    imgTurnoClosed.Visible = True
    imgTurnoOpen.Visible = False
    Return 
  Endif
  

  gridOrdenDetails.header = GridView.Horizontal
  gridOrdenDetails.grid = True
  gridOrdenDetails.Rows.count = 0
 
  'Obtiene la lista de órdenes abiertas  
  modUtils.refreshMainGridOrdenes()
  
  FMain1.Text = modVariables.sPrefijoDB
  
  Catch
    Print Error.Text
    Message.Error(Error.Text & ", " & Error.Where)
End

Public Sub tmrUpdates_Timer()

Dim sBackupFile As String
Dim sLoadDb As String

  modVariables.cnfDBUpdates = New Settings(User.Home &/ modVariables.sCloudDirectory &/ "TacosRoy2.18/TacosRoy/updates.conf")
  sBackupFile = modVariables.cnfDBUpdates["Backups/backup_" & modVariables.sPrefijoDB]
  
  If sBackupFile = "True" Then 
    modUtils.doSQLDump(True) 
  Endif
  
  sLoadDB = modVariables.cnfDBUpdates["Updates/update_" & modVariables.sPrefijoDB]
  If sLoadDB = "True" Then 
    modLoadDB.doLoadDB()
  Endif
  
Catch 
  Print (Error.Text & ", " & Error.Where)
  Message.Error(Error.Text & ", " & Error.Where)

End

Public Sub Button7_Click()

  modVariables.c_Conn.Close
  Me.Close

  Catch
    Print Error.Text
    Message.Error(Error.Text & ", " & Error.Where)
End

Public Sub btnNuevaOrden_Click()

'Dim qString As String
Dim hResult As Result
Dim sQuery As String

  If (Message.Question("Desea crear una nueva orden?", "Sí, crear", "NO, Cancelar") = 1) Then
    'Reinicializar variables globales
    
    modVariables.i_intOrdenID = 0
    modVariables.i_intTipoPrecio = 0
    modVariables.i_intIDMesaTemp = 0
    modVariables.s_strMesaTemp = ""
    modVariables.f_ventaSubTotal = 0
    modVariables.i_intIDPersonal = 0
    modVariables.i_intTicketNR = 0
    
    'checamos el ticket siguiente
    Try hResult = modVariables.c_Conn.Exec("SELECT * FROM tbl_ticket_cons order by  id_ticketNrConsecutivo desc limit 1")
    modVariables.i_intTicketNR = CInt(hResult["id_ticketNrConsecutivo"])
    modVariables.i_orderNumber = CInt(hResult["chr_ticketConsecutivo"])
    
    hResult = Null
    
    'Inserta nuevo consecutivo en tabla de consecutivos
    sQuery = "INSERT INTO `tbl_ticket_cons` (`chr_ticketConsecutivo`) VALUES (&1);"
    modVariables.c_Conn.Exec(sQuery, CInt(modVariables.i_orderNumber + 1))

    modVariables.i_intTicketNR = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
    
    sQuery = "INSERT INTO `tbl_consecutivo` (`chr_consecutivo`) VALUES (&1)"
    Try modVariables.c_Conn.Exec(sQuery, modVariables.i_orderNumber + 1)

    'Una vez obtenido el consecutivo, creamos una orden y guardamos el consecutivo
    sQuery = "INSERT INTO `tbl_ordenes` (`dt_horafecha_orden`, `int_mesa`, `int_consecutivo`, `chr_status_orden`, `id_control_fecha`) VALUES (&1, &2, &3, &4, &5);"
    modVariables.c_Conn.Exec(sQuery, Now(), 18, modVariables.i_intTicketNR, "Abierta", modVariables.i_idControlFecha)
    
    modVariables.i_intOrdenID = modVariables.c_Conn.Exec("select last_insert_id() as last")["last"]
    'Print "orden ID: " & modVariables.i_intOrdenID 
    'modVariables.i_orderNumber = modVariables.i_intTicketNR
    hResult = Null
    
    'Ya con nr de orden, se debe elegir mesa
    Do While modVariables.s_strMesaTemp = ""
      FMesas.ShowModal
      If modVariables.s_strMesaTemp <> "" Then 
        sQuery = "UPDATE `tbl_ordenes` SET `int_mesa` = &1 WHERE (`id_orden_id` = &2);"
        modVariables.c_Conn.Exec(sQuery, modVariables.i_intIDMesaTemp, modVariables.i_intOrdenID)
        Exit
      Else
        Message.Error("Debe Elegir una mesa")
        FMesas.ShowModal
        Break 
      Endif
    Loop
    
    'Le asignamos la orden a un mesero
    sQuery = "INSERT INTO `tbl_ordenes_personal` (`id_orden_id`, `id_personal`) VALUES (&1, &2);"
    modVariables.c_Conn.Exec(sQuery, modVariables.i_intOrdenID, modVariables.i_intIDPersonal)
    
    
      
    FsAMProdsTodo.ShowModal

  Endif
  
  Catch
    Print (Error.Text & ", " & Error.Where)
    Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnCancelOrden_Click()

Dim sQuery As String
Dim iInc, iJnc As Integer
Dim hResult As Result

If modVariables.i_UsrLevel <= 4 And (modVariables.c_Conn <> Null) Then
    FAuth.ShowModal
    If modVariables.i_UsrLevel < 4 Then 
      Message.Error("Autorización incorrecta")
      'Me.Quit
      Me.Close 
      Return 
    Else 
      If (Message.Question("Desea cancelar la orden seleccionada?" & gb.Cr & "Este paso es irreversible", "Sí, Cancelar", "No, Continuar") = 1) Then
        'Print gridMainOrden.Row

        FAuth.ShowModal
        If modVariables.i_UsrLevel <= 4 Then 
          Message.Error("No tiene autorizacion para Cancelar")
          gridMainOrden.SetFocus
          Return 
        Else 
          hResultOrdenes.MoveTo(gridMainOrden.Row)
          sQuery = "UPDATE  `tbl_ordenes` SET  `chr_status_orden` =  'Cancelada', `dt_horafecha_orden` = Now(), `chr_status_orden` = 'Cancelada' WHERE `tbl_ordenes`.`id_orden_id` =&1"
          'modVariables.i_tipoCobro = modVariables.COBRO_CANCELADO
          gridMainOrden.Rows.Count = 0
          Try modVariables.c_Conn.Exec(sQuery, hResultOrdenes[0])
          
          'Mostrar pantalla de cobrar con 0 pesos
          'FCobrar.ShowModal()
          modVariables.c_Conn.Begin()
          hResult = modVariables.c_Conn.Create("tbl_ordenes_cerradas")
          hResult!id_orden_id = modVariables.i_intOrdenID
          hResult!dt_horafecha_cierre_orden = Now()
          hResult!fl_total = 0
          hResult!bool_factura = 0
          hResult!chr_referencia_notas = "CANCELADA"
          hResult!int_lvl_report = 1
          hResult!id_ticket_IDNr = modVariables.i_intTicketNR
          hResult!id_control_fecha = modVariables.i_idControlFecha
          hResult!int_forma_pago = modVariables.COBRO_CANCELADO
          hResult.Update()
          modVariables.c_Conn.Commit()
          hResult = Null
    
          modVariables.i_tipoCobro = modVariables.COBRO_CANCELADO
          
          'Obtiene la lista de órdenes abiertas  
          qString = "SELECT" 
          qstring &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
          qstring &= " `tbl_ordenes`.`int_nr_comanda` as `Comanda`," 
          qstring &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
          qstring &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
          qstring &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
          qstring &= "  `tbl_ticket_cons`.`id_ticketNrConsecutivo` as `IDTicketNR`, "
          qstring &= "  `tbl_ticket_cons`.`chr_ticketConsecutivo` as `TicketNR`, "
          qString &= "  `tbl_clientes`.`id_cliente` as `ID Cliente`,"
          qString &= "  `tbl_clientes`.`chr_email` as `Cliente`"
          qstring &= " From `tbl_ordenes`"
          qstring &= "   left join `tbl_ordenes_x_clientes` on `tbl_ordenes_x_clientes`.`id_orden` = `tbl_ordenes`.`id_orden_id`"
          qstring &= "   left join `tbl_clientes` on `tbl_ordenes_x_clientes`.`id_cliente` = `tbl_clientes`.`id_cliente`"
          qstring &= "   inner join `tbl_ticket_cons` on `tbl_ticket_cons`.`id_ticketNrConsecutivo` = `tbl_ordenes`.`int_consecutivo`"
          qstring &= "   where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
          
          Try hResultOrdenes = modVariables.c_Conn.Exec(sQuery)
          gridMainOrden.Clear
          gridMainOrden.Rows.count = 0
          gridMainOrden.header = GridView.Horizontal
          gridMainOrden.grid = True
          gridMainOrden.Columns.count = hResultOrdenes.Fields.Count
          For iInc = 0 To hResultOrdenes.Fields.Count - 1
            iJnc = 1
            Do While Mid(hResultOrdenes.Fields[iInc].Name, iJnc, 1) <> "."
              iJnc += 1
            Loop
            gridMainOrden.Columns[iInc].Text = Right(hResultOrdenes.Fields[iInc].Name, Len(hResultOrdenes.Fields[iInc].Name) - iJnc)
            gridMainOrden.Columns[iInc].Width = 50 + 5 * Len(Right(hResultOrdenes.Fields[iInc].Name, Len(hResultOrdenes.Fields[iInc].Name) - iJnc))
          Next
          gridMainOrden.Rows.Count = hResultOrdenes.Count
          
          
        Endif
      Endif
      Return
    Endif
  Endif
  
Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub btnCerrarOrden_Click()
  
  Dim intResp As Integer
  Dim iInc, iJnc As Integer
  
  intresp = Message.Question("Desea cerrar/cobrar la orden No: " & modVariables.i_intOrdenID & "?", "Cerrar", "Cancelar")
  Select Case intresp
    Case 1
      'modVariables.i_tipoCobro = modVariables.COBRO_NORMAL
      FCobrar.ShowModal
    Case Else
      Message("No se hara nada")
  End Select
  
  qString = "SELECT" 
  qstring &= " `tbl_ordenes`.`id_orden_id` as `Orden`," 
  qstring &= " `tbl_ordenes`.`int_nr_comanda` as `Comanda`," 
  qstring &= " `tbl_ordenes`.`dt_horafecha_orden` as `Hora`," 
  qstring &= " `tbl_ordenes`.`int_mesa` as `Mesa`," 
  qstring &= " `tbl_ordenes`.`chr_status_orden` as `Status`,"
  qstring &= "  `tbl_ticket_cons`.`id_ticketNrConsecutivo` as `IDTicketNR`, "
  qstring &= "  `tbl_ticket_cons`.`chr_ticketConsecutivo` as `TicketNR`, "
  qString &= "  `tbl_clientes`.`id_cliente` as `ID Cliente`,"
  qString &= "  `tbl_clientes`.`chr_email` as `Cliente`"
  qstring &= " From `tbl_ordenes`"
  qstring &= "   left join `tbl_ordenes_x_clientes` on `tbl_ordenes_x_clientes`.`id_orden` = `tbl_ordenes`.`id_orden_id`"
  qstring &= "   left join `tbl_clientes` on `tbl_ordenes_x_clientes`.`id_cliente` = `tbl_clientes`.`id_cliente`"
  qstring &= "   inner join `tbl_ticket_cons` on `tbl_ticket_cons`.`id_ticketNrConsecutivo` = `tbl_ordenes`.`int_consecutivo`"
  qstring &= "   where `tbl_ordenes`.`chr_status_orden` = 'Abierta' order by Orden ASC"
  
  Try hResultOrdenes = modVariables.c_Conn.Exec(qString)
  If Error Then 
    Print Error.Text
  Else
    'Llena el grid con las ordenes abiertas
    gridMainOrden.Rows.count = 0
    gridMainOrden.header = GridView.Horizontal
    gridMainOrden.grid = True
    gridMainOrden.Columns.count = hResultOrdenes.Fields.Count
    For iInc = 0 To hResultOrdenes.Fields.Count - 1
      iJnc = 1
      Do While Mid(hResultOrdenes.Fields[iInc].Name, iJnc, 1) <> "."
        iJnc += 1
      Loop
      gridMainOrden.Columns[iInc].Text = Right(hResultOrdenes.Fields[iInc].Name, Len(hResultOrdenes.Fields[iInc].Name) - iJnc)
      gridMainOrden.Columns[iInc].Width = 50 + 5 * Len(Right(hResultOrdenes.Fields[iInc].Name, Len(hResultOrdenes.Fields[iInc].Name) - iJnc))
    Next
    gridMainOrden.Rows.Count = hResultOrdenes.Count
  Endif
  
End

Public Sub Timer1_Timer()
  lblTimer.Text = modUtils.TimerClk_Timer()
End


Public Sub gridMainOrden_Data(Row As Integer, Column As Integer)

  If (hResultOrdenes <> Null) = True And hResultOrdenes.Available And (Row >= 0) = True Then 
    Try hResultOrdenes.moveTo(Row)
    If row Mod 2 = 0 Then gridMainOrden.Data.Background = Color.RGB(115, 115, 115)
    gridMainOrden.Data.text = Str(hResultOrdenes[gridMainOrden.Columns[column].text])
  Endif
  
Catch
  Print Error.Text
  'Message.Error(Error.Text & ", " & Error.Where)
  
End

Public Sub gridMainOrden_DblClick()

Dim intTempOrder As Integer
Dim myResult As Result

  If modVariables.i_idControlFecha <> 0 Then
    btnNuevaOrden.Enabled = True
    gridOrdenDetails.Rows.Count = 0
    intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
    modVariables.i_intOrdenID = hResultOrdenes["Orden"]
    modVariables.i_intTicketNR = hResultOrdenes["IDTicketNR"]
    modVariables.i_orderNumber = hResultOrdenes["TicketNR"]
    modVariables.s_strMesaTemp = hResultOrdenes["Mesa"]
    modVariables.i_intNrComanda = hResultOrdenes["Comanda"]
    If (hResultOrdenes["ID Cliente"] <> Null) Then modVariables.iClienteID = hResultOrdenes["ID Cliente"]
    
    qString = "SELECT id_tipo_precio FROM tbl_precio_tipo_ordenes where id_orden = &1;"
    Try myResult = modVariables.c_Conn.Exec(qString, modVariables.i_intOrdenID)
    
    modVariables.i_intTipoPrecio = myResult[0]
    
    myResult = Null
    
    If modVariables.i_UsrLevel >= 4 Then btnCancelOrden.Enabled = True
    btnModifOrden.Enabled = True
    btnCerrarOrden.Enabled = True
  
    qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` order by `HoraFecha` Asc"  
    
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, hResultOrdenes[0]) 
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
     Else 
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
    Endif
  Endif
  
If gridMainOrden.Row > 0 Then
  btnImrpimeCuenta.Enabled = True
  If modVariables.i_UsrLevel >= 4 Then btnCancelOrden.Enabled = True
  btnCerrarOrden.Enabled = True
  btnModifOrden.Enabled = True
Endif

Catch
  Message.Error(Error.Text & ", " & Error.Where)

End

Public Sub gridMainOrden_Click()

Dim intTempOrder As Integer
Dim myResult As Result
Dim iInc, iJnc As Integer

  'If modVariables.i_idControlFecha <> 0 Then
    btnNuevaOrden.Enabled = True
    gridOrdenDetails.Rows.Count = 0
    intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
    modVariables.i_intOrdenID = hResultOrdenes["Orden"]
    'modVariables.i_intTicketNR = hResultOrdenes["IDTicketNR"]
    'modVariables.i_orderNumber = hResultOrdenes["TicketNR"]
    modVariables.sStatusOrden = hResultOrdenes["Status"]
    If hResultOrdenes["Comanda"] <> Null Then 
      modVariables.i_intNrComanda = hResultOrdenes["Comanda"]
    Else 
      modVariables.i_intNrComanda = 0
    Endif
    modVariables.s_strMesaTemp = hResultOrdenes["Mesa"]
    'If (hResultOrdenes["ID Cliente"] <> Null) Then modVariables.iClienteID = hResultOrdenes["ID Cliente"]
    
    qString = "SELECT id_tipo_precio FROM tbl_precio_tipo_ordenes where id_orden = &1;"
    Try myResult = modVariables.c_Conn.Exec(qString, modVariables.i_intOrdenID)
    
    If (myResult[0] <> Null) Then
      modVariables.i_intTipoPrecio = myResult[0]
    Endif
    
    myResult = Null
    
    If gridMainOrden.Row >= 0 Then
      If modVariables.i_UsrLevel >= 4 Then btnCancelOrden.Enabled = True
      btnModifOrden.Enabled = True
      btnCerrarOrden.Enabled = True
      btnImrpimeCuenta.Enabled = True
    Else
      btnCancelOrden.Enabled = False
      btnModifOrden.Enabled = False
      btnCerrarOrden.Enabled = False
      btnImrpimeCuenta.Enabled = False
    Endif
  
    qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` order by `HoraFecha` Asc"  
    
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, modVariables.i_intOrdenID) ' , modVariables.i_intTipoPrecio)
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
    Else 
      'Message(qString & ", " & hResultOrdenes[0])
      gridOrdenDetails.Rows.count = 0
      gridOrdenDetails.header = GridView.Horizontal
      gridOrdenDetails.grid = True
      gridOrdenDetails.Columns.count = tmpOrden_prods_precio.Fields.Count
      For iInc = 0 To tmpOrden_prods_precio.Fields.Count - 1
        
        gridOrdenDetails.Columns[iInc].Text = tmpOrden_prods_precio.Fields[iInc].Name
        gridOrdenDetails.Columns[iInc].Width = 50 + 5 * Len(Right(tmpOrden_prods_precio.Fields[iInc].Name, Len(tmpOrden_prods_precio.Fields[iInc].Name) - iJnc))
      Next
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
      
    Endif
  'Endif
  
Catch
  Message.Error(Error.Text & ", " & Error.Where)

End

Public Sub gridMainOrden_KeyRelease()

Dim intTempOrder As Integer

  gridOrdenDetails.Rows.Count = 0
  intTempOrder = hResultOrdenes.MoveTo(gridMainOrden.Row)
  modVariables.i_intOrdenID = hResultOrdenes["Orden"]
  modVariables.i_intNrComanda = hResultOrdenes["Comanda"]
  modVariables.i_intTicketNR = hResultOrdenes["IDTicketNR"]
  modVariables.i_orderNumber = hResultOrdenes["TicketNR"]
  modVariables.s_strMesaTemp = hResultOrdenes["Mesa"]
  
  If modVariables.i_UsrLevel >= 4 Then btnCancelOrden.Enabled = True
  btnModifOrden.Enabled = True
  btnCerrarOrden.Enabled = True

  qString = "Select * from vw_prods_x_orden where `Orden` = &1 and `Activo` = 1 and `Tipo Precio` = &2  order by `HoraFecha` Asc"  
    Try tmpOrden_prods_precio = modVariables.c_Conn.Exec(qString, hResultOrdenes[0], modVariables.i_intTipoPrecio)
    If Error Then 
      Message.Error(Error.Text & ", " & Error.Where) 
     Else 
      'Message(qString & ", " & hResultOrdenes[0])
      gridOrdenDetails.Rows.Count = tmpOrden_prods_precio.Count
    Endif
  
If gridMainOrden.Row > 0 Then btnImrpimeCuenta.Enabled = True

End


Public Sub gridOrdenDetails_Data(Row As Integer, Column As Integer)

  Try tmpOrden_prods_precio.moveTo(Row)
  If Error Then Print Error.text
  
  Try gridOrdenDetails.Data.text = Str(tmpOrden_prods_precio[gridOrdenDetails.Columns[column].text])  
  If Error Then Print Error.text
  
  If row Mod 2 = 0 Then gridOrdenDetails.Data.Background = Color.RGB(115, 115, 115)

End


Public Sub btnModifOrden_Click()

  If (Message.Question("Desea modificar la orden seleccionada?", "Sí, Modificar", "No, Cancelar") = 1) Then
    'FComandasN.ShowModal
    FsAMProdsTodo.ShowModal
  Endif

End

Public Sub btnImrpimeCuenta_Click()
Dim sTempFile, sCommand As String

  Me.Enabled = False
  PrinterCuenta.PaperWidth = 80
  Inc Application.Busy
  sTempFile = User.Home &/ "Tickets/ticketOrden_" & modVariables.i_orderNumber & "-" & Format(Now, "yyyy-mm-dd_hh:nn:ss") & ".pdf"
  'sTempFile = Subst(" ", )
  sTempFile = Replace(sTempFile, " ", "-")
  PrinterCuenta.OutputFile = sTempFile
  PrinterCuenta.Print()
  'imprimir archivo generado utilizando bash
  sCommand = "lpr " & sTempFile 
  Shell sCommand Wait 
  
  Dec Application.Busy
  Me.Enabled = True

End

Public Sub PrinterCuenta_Draw()

  Dim sQuery As String
  Dim rResultSuc As Result
  Dim sTemporal As String[]
  Dim hImage As Image
  Dim iInc As Integer
  Dim sArray As String[] = Split(File.Load("Templates" &/ "ticketprevio-" & modVariables.sPrefijoDB & ".html"), gb.Newline, "", True)
  Dim sHTML As String
  Dim tLetra As String
  
  iInc = 1
  sHTML = sArray.Join(gb.Newline)
  
  hImage = Image.Load("Imagenes" &/ "logoTicket.png")
  hImage.Opacity(0.3)
  Paint.MoveTo(PRINT_MARGIN + 20, 105)
  Paint.DrawImage(hImage, 150, 600, hImage.Width * 7, hImage.Height * 7)
  
  rYPrint = 250 'PRINT_MARGIN - (PrinterCobrar.Page - 1) * (Paint.Height - PRINT_MARGIN * 2)
  
  Paint.Font = Font["Helvetica"]
  sHTML = Replace(sHTML, "@@DateTime@@", Format(Now(), "dddd, yyyy-mm-dd hh:nn"))
    
  sHTML = Replace(sHTML, "@@OrdenNr@@", CStr(modVariables.i_intOrdenID))
  sHTML = Replace(sHTML, "@@TicketNr@@", CStr(modVariables.i_intTicketNR))
  sHTML = Replace(sHTML, "@@NrMesa@@", CStr(modVariables.s_strMesaTemp))
  
  rResultSuc = Null
  sQuery = "SELECT * FROM tbl_datos_sucursal where id_sucursal = 1"
  Try rResultSuc = modVariables.c_Conn.Exec(sQuery)
  
  sHTML = Replace(sHTML, "@@NombreSucursal@@", CStr(rResultSuc["chr_nombre"]))
  sHTML = Replace(sHTML, "@@DatosSuc1@@", CStr(rResultSuc["chr_dir1"]))
  sHTML = Replace(sHTML, "@@DatosSuc2@@", CStr(rResultSuc["chr_dir2"]))
  sHTML = Replace(sHTML, "@@DatosSuc3@@", CStr(rResultSuc["chr_dir3"]))
  sHTML = Replace(sHTML, "@@TelefonoSuc@@", CStr(rResultSuc["chr_telefono1"]))
  
  'aqui va el calculo con print true
  sTemporal = FCobrar.sCalculaCosto(modVariables.i_intOrdenID)
  sHTML = Replace(sHTML, "@@DetalleOrden@@", sTemporal[0])
  
  tLetra = modNumeros.EnLetras(CStr(sTemporal[1]))
  sHTML = Replace(sHTML, "@@TotalLetra@@", tLetra)
  sHTML = Replace(sHTML, "@@Total@@", sTemporal[1])
  
  PrinterCuenta.PaperWidth = 80
  Paint.DrawRichText(sHTML, PRINT_MARGIN, rYPrint + 20, Paint.Width - PRINT_MARGIN * 2, Paint.Height * PrinterCuenta.Count, Align.TopNormal)
  
Catch
  Print Error.Text
  Message.Error(Error.Text & ", " & Error.Where)
End

Public Sub mnuSalir_Click()

  modVariables.c_Conn.Close
  Me.Close

End

Public Sub mnuReTickets_Click()
  
  FTickets.ShowModal()
  
End

Public Sub mnuInsumos_Click()

  FInsumos.ShowModal

End

Public Sub mnuRespaldo_Click()

  'Creamos un respaldo de la base de datos
  Inc Application.Busy
  'mysqldump -uroot -proot theitstuff > theitstuff.sql; 
  modUtils.doSQLDump() 
    
  Dec Application.Busy
  
  If Error Then
    Message("No se pudo crear el respaldo de la base de datos\n" & Error.Text)
  Else
    Message("Respaldo creado exitosamente")
  Endif
  
Catch
  Print Error.Text
  Message.Error(Error.Where & ": " & Error.Text)


End

Public Sub PictureBox1_MouseUp()

  If Mouse.Control Then 
    FReimpTickets.ShowModal()
  Endif

End

Public Sub mnuClientes_Click()

  FBClientes.ShowModal

End

Public Sub mnuImportar_Click()
Dim sPreComannd, sCommand, sFileName, sFileType As String
Dim iInc As Integer

  If Exist(User.Home &/ modVariables.sCloudDirectory & "TRdumps" &/ modVariables.sPrefijoDB & "/") = False Then
    modUtils.CreateDirTree(User.Home &/ modVariables.sCloudDirectory & "TRdumps" &/ modVariables.sPrefijoDB & "/")
  Endif
  Dialog.Path = User.Home &/ modVariables.sCloudDirectory & "TRdumps" &/ modVariables.sPrefijoDB & "/"
  Dialog.Filter = ["*.zip;*.sql;*.sql.gz;*.gz", "Respaldo de base de datos"]
  
  If Not Dialog.OpenFile(False) Then 
    sFileName = Dialog.Path
  Else 
    Message.Warning("Debe elegir un archivo")
    Return 
  Endif

  sCommand = "file -bi " & sFileName 
  Shell sCommand To sFileType 
  
  For iInc = 1 To Len(sFileType)
    If Mid(sFileType, iInc, 1) = ";" Then 
      sFileType = Left(sFileType, iInc - 1)
    Endif
  Next
  'Print sFileType
  
  Dialog.AskPassword
  If Dialog.Password <> "" Then
    modVariables.sUserZipFile = Dialog.User
    modVariables.sPassZipFile = Dialog.Password
  Else 
    Message.Error("Ingrese credenciales por favor")
    Return 
  Endif
  
  Select Case sFileType
    Case "application/zip", "application/gzip"
      'Dialog.Key = "filepass"
      sPreComannd = "7z x " & sFileName & " -p" & modVariables.sPassZipFile & " -so "
      sCommand = sPreComannd & " | mysql --protocol=tcp --host=localhost --user=" & modVariables.sUserZipFile & " -p" & modVariables.sPassZipFile & " --port=3306 --default-character-set=utf8 --comments --database=db_tacosroy_" & modVariables.sPrefijoDB 
    Case "text/plain"
      sCommand = "mysql --protocol=tcp --host=localhost --user=" & modVariables.sUserZipFile & " -p" & modVariables.sPassZipFile & " --port=3306 --default-character-set=utf8 --comments --database=db_tacosroy_" & modVariables.sPrefijoDB & " < " & sFileName 
  End Select
   
  Inc Application.Busy
  'Print sCommand 
  Shell sCommand Wait
  Dec Application.Busy
  
  If Not Error Then 
    Message("Datos importados correctamente")
  Endif 
  
Catch
  Print Error.Text
  Message.Error(Error.Where & ": " & Error.Text)

End

Public Sub mnuSesion_Click()

  modVariables.i_idControlFecha = modUtils.checaEstadoTurno(Now)
  
  If modVariables.i_idControlFecha = 0 Then
    Message.Error("Debe abrir turno para proceder")
    Return
  Endif
  
Catch
  
  Message.Error(Error.Text & ",\n" & gb.CrLf & Error.Where)

End

Public Sub mnuReportes_Click()

  FReports.Show

End

Public Sub mnuComandasFacturas_Click()

  If modVariables.bDebugTickets Then
    FComandasN.ShowModal
  Else 
    Return 
  Endif 

End

Public Sub mnuCuentas_Click()

  If modVariables.i_UsrLevel <= 3 And (modVariables.c_Conn <> Null) Then
    FAuth.ShowModal
    If modVariables.i_UsrLevel < 3 Then 
      Message.Error("Autorización incorrecta")
      'Me.Quit
      Me.Close 
      Return 
    Else 
      FReports.Show
    Endif
  Endif

  

End


Public Sub mnuTipos_Click()

  If modVariables.bDebugTickets Then
    FReportsConga.ShowModal()
  Else 
    Return 
  Endif

End
